// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// QuestionnaireQuestionAnswer is an object representing the database table.
type QuestionnaireQuestionAnswer struct {
	AssigneeID              string `boil:"assignee_id" json:"assignee_id" toml:"assignee_id" yaml:"assignee_id"`
	QuestionnaireQuestionID string `boil:"questionnaire_question_id" json:"questionnaire_question_id" toml:"questionnaire_question_id" yaml:"questionnaire_question_id"`
	OfferItemID             string `boil:"offer_item_id" json:"offer_item_id" toml:"offer_item_id" yaml:"offer_item_id"`
	Answer                  string `boil:"answer" json:"answer" toml:"answer" yaml:"answer"`

	R *questionnaireQuestionAnswerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L questionnaireQuestionAnswerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QuestionnaireQuestionAnswerColumns = struct {
	AssigneeID              string
	QuestionnaireQuestionID string
	OfferItemID             string
	Answer                  string
}{
	AssigneeID:              "assignee_id",
	QuestionnaireQuestionID: "questionnaire_question_id",
	OfferItemID:             "offer_item_id",
	Answer:                  "answer",
}

var QuestionnaireQuestionAnswerTableColumns = struct {
	AssigneeID              string
	QuestionnaireQuestionID string
	OfferItemID             string
	Answer                  string
}{
	AssigneeID:              "questionnaire_question_answer.assignee_id",
	QuestionnaireQuestionID: "questionnaire_question_answer.questionnaire_question_id",
	OfferItemID:             "questionnaire_question_answer.offer_item_id",
	Answer:                  "questionnaire_question_answer.answer",
}

// Generated where

var QuestionnaireQuestionAnswerWhere = struct {
	AssigneeID              whereHelperstring
	QuestionnaireQuestionID whereHelperstring
	OfferItemID             whereHelperstring
	Answer                  whereHelperstring
}{
	AssigneeID:              whereHelperstring{field: "`questionnaire_question_answer`.`assignee_id`"},
	QuestionnaireQuestionID: whereHelperstring{field: "`questionnaire_question_answer`.`questionnaire_question_id`"},
	OfferItemID:             whereHelperstring{field: "`questionnaire_question_answer`.`offer_item_id`"},
	Answer:                  whereHelperstring{field: "`questionnaire_question_answer`.`answer`"},
}

// QuestionnaireQuestionAnswerRels is where relationship names are stored.
var QuestionnaireQuestionAnswerRels = struct {
	OfferItem string
}{
	OfferItem: "OfferItem",
}

// questionnaireQuestionAnswerR is where relationships are stored.
type questionnaireQuestionAnswerR struct {
	OfferItem *OfferItem `boil:"OfferItem" json:"OfferItem" toml:"OfferItem" yaml:"OfferItem"`
}

// NewStruct creates a new relationship struct
func (*questionnaireQuestionAnswerR) NewStruct() *questionnaireQuestionAnswerR {
	return &questionnaireQuestionAnswerR{}
}

func (r *questionnaireQuestionAnswerR) GetOfferItem() *OfferItem {
	if r == nil {
		return nil
	}
	return r.OfferItem
}

// questionnaireQuestionAnswerL is where Load methods for each relationship are stored.
type questionnaireQuestionAnswerL struct{}

var (
	questionnaireQuestionAnswerAllColumns            = []string{"assignee_id", "questionnaire_question_id", "offer_item_id", "answer"}
	questionnaireQuestionAnswerColumnsWithoutDefault = []string{"assignee_id", "questionnaire_question_id", "offer_item_id", "answer"}
	questionnaireQuestionAnswerColumnsWithDefault    = []string{}
	questionnaireQuestionAnswerPrimaryKeyColumns     = []string{"assignee_id", "questionnaire_question_id"}
	questionnaireQuestionAnswerGeneratedColumns      = []string{}
)

type (
	// QuestionnaireQuestionAnswerSlice is an alias for a slice of pointers to QuestionnaireQuestionAnswer.
	// This should almost always be used instead of []QuestionnaireQuestionAnswer.
	QuestionnaireQuestionAnswerSlice []*QuestionnaireQuestionAnswer
	// QuestionnaireQuestionAnswerHook is the signature for custom QuestionnaireQuestionAnswer hook methods
	QuestionnaireQuestionAnswerHook func(context.Context, boil.ContextExecutor, *QuestionnaireQuestionAnswer) error

	questionnaireQuestionAnswerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	questionnaireQuestionAnswerType                 = reflect.TypeOf(&QuestionnaireQuestionAnswer{})
	questionnaireQuestionAnswerMapping              = queries.MakeStructMapping(questionnaireQuestionAnswerType)
	questionnaireQuestionAnswerPrimaryKeyMapping, _ = queries.BindMapping(questionnaireQuestionAnswerType, questionnaireQuestionAnswerMapping, questionnaireQuestionAnswerPrimaryKeyColumns)
	questionnaireQuestionAnswerInsertCacheMut       sync.RWMutex
	questionnaireQuestionAnswerInsertCache          = make(map[string]insertCache)
	questionnaireQuestionAnswerUpdateCacheMut       sync.RWMutex
	questionnaireQuestionAnswerUpdateCache          = make(map[string]updateCache)
	questionnaireQuestionAnswerUpsertCacheMut       sync.RWMutex
	questionnaireQuestionAnswerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var questionnaireQuestionAnswerAfterSelectMu sync.Mutex
var questionnaireQuestionAnswerAfterSelectHooks []QuestionnaireQuestionAnswerHook

var questionnaireQuestionAnswerBeforeInsertMu sync.Mutex
var questionnaireQuestionAnswerBeforeInsertHooks []QuestionnaireQuestionAnswerHook
var questionnaireQuestionAnswerAfterInsertMu sync.Mutex
var questionnaireQuestionAnswerAfterInsertHooks []QuestionnaireQuestionAnswerHook

var questionnaireQuestionAnswerBeforeUpdateMu sync.Mutex
var questionnaireQuestionAnswerBeforeUpdateHooks []QuestionnaireQuestionAnswerHook
var questionnaireQuestionAnswerAfterUpdateMu sync.Mutex
var questionnaireQuestionAnswerAfterUpdateHooks []QuestionnaireQuestionAnswerHook

var questionnaireQuestionAnswerBeforeDeleteMu sync.Mutex
var questionnaireQuestionAnswerBeforeDeleteHooks []QuestionnaireQuestionAnswerHook
var questionnaireQuestionAnswerAfterDeleteMu sync.Mutex
var questionnaireQuestionAnswerAfterDeleteHooks []QuestionnaireQuestionAnswerHook

var questionnaireQuestionAnswerBeforeUpsertMu sync.Mutex
var questionnaireQuestionAnswerBeforeUpsertHooks []QuestionnaireQuestionAnswerHook
var questionnaireQuestionAnswerAfterUpsertMu sync.Mutex
var questionnaireQuestionAnswerAfterUpsertHooks []QuestionnaireQuestionAnswerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *QuestionnaireQuestionAnswer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAnswerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *QuestionnaireQuestionAnswer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAnswerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *QuestionnaireQuestionAnswer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAnswerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *QuestionnaireQuestionAnswer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAnswerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *QuestionnaireQuestionAnswer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAnswerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *QuestionnaireQuestionAnswer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAnswerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *QuestionnaireQuestionAnswer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAnswerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *QuestionnaireQuestionAnswer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAnswerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *QuestionnaireQuestionAnswer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAnswerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQuestionnaireQuestionAnswerHook registers your hook function for all future operations.
func AddQuestionnaireQuestionAnswerHook(hookPoint boil.HookPoint, questionnaireQuestionAnswerHook QuestionnaireQuestionAnswerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		questionnaireQuestionAnswerAfterSelectMu.Lock()
		questionnaireQuestionAnswerAfterSelectHooks = append(questionnaireQuestionAnswerAfterSelectHooks, questionnaireQuestionAnswerHook)
		questionnaireQuestionAnswerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		questionnaireQuestionAnswerBeforeInsertMu.Lock()
		questionnaireQuestionAnswerBeforeInsertHooks = append(questionnaireQuestionAnswerBeforeInsertHooks, questionnaireQuestionAnswerHook)
		questionnaireQuestionAnswerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		questionnaireQuestionAnswerAfterInsertMu.Lock()
		questionnaireQuestionAnswerAfterInsertHooks = append(questionnaireQuestionAnswerAfterInsertHooks, questionnaireQuestionAnswerHook)
		questionnaireQuestionAnswerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		questionnaireQuestionAnswerBeforeUpdateMu.Lock()
		questionnaireQuestionAnswerBeforeUpdateHooks = append(questionnaireQuestionAnswerBeforeUpdateHooks, questionnaireQuestionAnswerHook)
		questionnaireQuestionAnswerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		questionnaireQuestionAnswerAfterUpdateMu.Lock()
		questionnaireQuestionAnswerAfterUpdateHooks = append(questionnaireQuestionAnswerAfterUpdateHooks, questionnaireQuestionAnswerHook)
		questionnaireQuestionAnswerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		questionnaireQuestionAnswerBeforeDeleteMu.Lock()
		questionnaireQuestionAnswerBeforeDeleteHooks = append(questionnaireQuestionAnswerBeforeDeleteHooks, questionnaireQuestionAnswerHook)
		questionnaireQuestionAnswerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		questionnaireQuestionAnswerAfterDeleteMu.Lock()
		questionnaireQuestionAnswerAfterDeleteHooks = append(questionnaireQuestionAnswerAfterDeleteHooks, questionnaireQuestionAnswerHook)
		questionnaireQuestionAnswerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		questionnaireQuestionAnswerBeforeUpsertMu.Lock()
		questionnaireQuestionAnswerBeforeUpsertHooks = append(questionnaireQuestionAnswerBeforeUpsertHooks, questionnaireQuestionAnswerHook)
		questionnaireQuestionAnswerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		questionnaireQuestionAnswerAfterUpsertMu.Lock()
		questionnaireQuestionAnswerAfterUpsertHooks = append(questionnaireQuestionAnswerAfterUpsertHooks, questionnaireQuestionAnswerHook)
		questionnaireQuestionAnswerAfterUpsertMu.Unlock()
	}
}

// One returns a single questionnaireQuestionAnswer record from the query.
func (q questionnaireQuestionAnswerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*QuestionnaireQuestionAnswer, error) {
	o := &QuestionnaireQuestionAnswer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for questionnaire_question_answer")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all QuestionnaireQuestionAnswer records from the query.
func (q questionnaireQuestionAnswerQuery) All(ctx context.Context, exec boil.ContextExecutor) (QuestionnaireQuestionAnswerSlice, error) {
	var o []*QuestionnaireQuestionAnswer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to QuestionnaireQuestionAnswer slice")
	}

	if len(questionnaireQuestionAnswerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all QuestionnaireQuestionAnswer records in the query.
func (q questionnaireQuestionAnswerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count questionnaire_question_answer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q questionnaireQuestionAnswerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if questionnaire_question_answer exists")
	}

	return count > 0, nil
}

// OfferItem pointed to by the foreign key.
func (o *QuestionnaireQuestionAnswer) OfferItem(mods ...qm.QueryMod) offerItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OfferItemID),
	}

	queryMods = append(queryMods, mods...)

	return OfferItems(queryMods...)
}

// LoadOfferItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (questionnaireQuestionAnswerL) LoadOfferItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQuestionnaireQuestionAnswer interface{}, mods queries.Applicator) error {
	var slice []*QuestionnaireQuestionAnswer
	var object *QuestionnaireQuestionAnswer

	if singular {
		var ok bool
		object, ok = maybeQuestionnaireQuestionAnswer.(*QuestionnaireQuestionAnswer)
		if !ok {
			object = new(QuestionnaireQuestionAnswer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeQuestionnaireQuestionAnswer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeQuestionnaireQuestionAnswer))
			}
		}
	} else {
		s, ok := maybeQuestionnaireQuestionAnswer.(*[]*QuestionnaireQuestionAnswer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeQuestionnaireQuestionAnswer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeQuestionnaireQuestionAnswer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &questionnaireQuestionAnswerR{}
		}
		args[object.OfferItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questionnaireQuestionAnswerR{}
			}

			args[obj.OfferItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`offer_item`),
		qm.WhereIn(`offer_item.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`offer_item.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OfferItem")
	}

	var resultSlice []*OfferItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OfferItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for offer_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offer_item")
	}

	if len(offerItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OfferItem = foreign
		if foreign.R == nil {
			foreign.R = &offerItemR{}
		}
		foreign.R.QuestionnaireQuestionAnswers = append(foreign.R.QuestionnaireQuestionAnswers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfferItemID == foreign.ID {
				local.R.OfferItem = foreign
				if foreign.R == nil {
					foreign.R = &offerItemR{}
				}
				foreign.R.QuestionnaireQuestionAnswers = append(foreign.R.QuestionnaireQuestionAnswers, local)
				break
			}
		}
	}

	return nil
}

// SetOfferItem of the questionnaireQuestionAnswer to the related item.
// Sets o.R.OfferItem to related.
// Adds o to related.R.QuestionnaireQuestionAnswers.
func (o *QuestionnaireQuestionAnswer) SetOfferItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OfferItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `questionnaire_question_answer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
		strmangle.WhereClause("`", "`", 0, questionnaireQuestionAnswerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AssigneeID, o.QuestionnaireQuestionID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfferItemID = related.ID
	if o.R == nil {
		o.R = &questionnaireQuestionAnswerR{
			OfferItem: related,
		}
	} else {
		o.R.OfferItem = related
	}

	if related.R == nil {
		related.R = &offerItemR{
			QuestionnaireQuestionAnswers: QuestionnaireQuestionAnswerSlice{o},
		}
	} else {
		related.R.QuestionnaireQuestionAnswers = append(related.R.QuestionnaireQuestionAnswers, o)
	}

	return nil
}

// QuestionnaireQuestionAnswers retrieves all the records using an executor.
func QuestionnaireQuestionAnswers(mods ...qm.QueryMod) questionnaireQuestionAnswerQuery {
	mods = append(mods, qm.From("`questionnaire_question_answer`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`questionnaire_question_answer`.*"})
	}

	return questionnaireQuestionAnswerQuery{q}
}

// FindQuestionnaireQuestionAnswer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQuestionnaireQuestionAnswer(ctx context.Context, exec boil.ContextExecutor, assigneeID string, questionnaireQuestionID string, selectCols ...string) (*QuestionnaireQuestionAnswer, error) {
	questionnaireQuestionAnswerObj := &QuestionnaireQuestionAnswer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `questionnaire_question_answer` where `assignee_id`=? AND `questionnaire_question_id`=?", sel,
	)

	q := queries.Raw(query, assigneeID, questionnaireQuestionID)

	err := q.Bind(ctx, exec, questionnaireQuestionAnswerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from questionnaire_question_answer")
	}

	if err = questionnaireQuestionAnswerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return questionnaireQuestionAnswerObj, err
	}

	return questionnaireQuestionAnswerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *QuestionnaireQuestionAnswer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no questionnaire_question_answer provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questionnaireQuestionAnswerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	questionnaireQuestionAnswerInsertCacheMut.RLock()
	cache, cached := questionnaireQuestionAnswerInsertCache[key]
	questionnaireQuestionAnswerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			questionnaireQuestionAnswerAllColumns,
			questionnaireQuestionAnswerColumnsWithDefault,
			questionnaireQuestionAnswerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(questionnaireQuestionAnswerType, questionnaireQuestionAnswerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(questionnaireQuestionAnswerType, questionnaireQuestionAnswerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `questionnaire_question_answer` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `questionnaire_question_answer` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `questionnaire_question_answer` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, questionnaireQuestionAnswerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into questionnaire_question_answer")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AssigneeID,
		o.QuestionnaireQuestionID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for questionnaire_question_answer")
	}

CacheNoHooks:
	if !cached {
		questionnaireQuestionAnswerInsertCacheMut.Lock()
		questionnaireQuestionAnswerInsertCache[key] = cache
		questionnaireQuestionAnswerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the QuestionnaireQuestionAnswer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *QuestionnaireQuestionAnswer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	questionnaireQuestionAnswerUpdateCacheMut.RLock()
	cache, cached := questionnaireQuestionAnswerUpdateCache[key]
	questionnaireQuestionAnswerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			questionnaireQuestionAnswerAllColumns,
			questionnaireQuestionAnswerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update questionnaire_question_answer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `questionnaire_question_answer` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, questionnaireQuestionAnswerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(questionnaireQuestionAnswerType, questionnaireQuestionAnswerMapping, append(wl, questionnaireQuestionAnswerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update questionnaire_question_answer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for questionnaire_question_answer")
	}

	if !cached {
		questionnaireQuestionAnswerUpdateCacheMut.Lock()
		questionnaireQuestionAnswerUpdateCache[key] = cache
		questionnaireQuestionAnswerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q questionnaireQuestionAnswerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for questionnaire_question_answer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for questionnaire_question_answer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QuestionnaireQuestionAnswerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionnaireQuestionAnswerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `questionnaire_question_answer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, questionnaireQuestionAnswerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in questionnaireQuestionAnswer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all questionnaireQuestionAnswer")
	}
	return rowsAff, nil
}

var mySQLQuestionnaireQuestionAnswerUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *QuestionnaireQuestionAnswer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no questionnaire_question_answer provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questionnaireQuestionAnswerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLQuestionnaireQuestionAnswerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	questionnaireQuestionAnswerUpsertCacheMut.RLock()
	cache, cached := questionnaireQuestionAnswerUpsertCache[key]
	questionnaireQuestionAnswerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			questionnaireQuestionAnswerAllColumns,
			questionnaireQuestionAnswerColumnsWithDefault,
			questionnaireQuestionAnswerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			questionnaireQuestionAnswerAllColumns,
			questionnaireQuestionAnswerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entity: unable to upsert questionnaire_question_answer, could not build update column list")
		}

		ret := strmangle.SetComplement(questionnaireQuestionAnswerAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`questionnaire_question_answer`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `questionnaire_question_answer` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(questionnaireQuestionAnswerType, questionnaireQuestionAnswerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(questionnaireQuestionAnswerType, questionnaireQuestionAnswerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for questionnaire_question_answer")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(questionnaireQuestionAnswerType, questionnaireQuestionAnswerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for questionnaire_question_answer")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for questionnaire_question_answer")
	}

CacheNoHooks:
	if !cached {
		questionnaireQuestionAnswerUpsertCacheMut.Lock()
		questionnaireQuestionAnswerUpsertCache[key] = cache
		questionnaireQuestionAnswerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single QuestionnaireQuestionAnswer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *QuestionnaireQuestionAnswer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no QuestionnaireQuestionAnswer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), questionnaireQuestionAnswerPrimaryKeyMapping)
	sql := "DELETE FROM `questionnaire_question_answer` WHERE `assignee_id`=? AND `questionnaire_question_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from questionnaire_question_answer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for questionnaire_question_answer")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q questionnaireQuestionAnswerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no questionnaireQuestionAnswerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from questionnaire_question_answer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for questionnaire_question_answer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QuestionnaireQuestionAnswerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(questionnaireQuestionAnswerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionnaireQuestionAnswerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `questionnaire_question_answer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, questionnaireQuestionAnswerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from questionnaireQuestionAnswer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for questionnaire_question_answer")
	}

	if len(questionnaireQuestionAnswerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *QuestionnaireQuestionAnswer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindQuestionnaireQuestionAnswer(ctx, exec, o.AssigneeID, o.QuestionnaireQuestionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QuestionnaireQuestionAnswerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QuestionnaireQuestionAnswerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionnaireQuestionAnswerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `questionnaire_question_answer`.* FROM `questionnaire_question_answer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, questionnaireQuestionAnswerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in QuestionnaireQuestionAnswerSlice")
	}

	*o = slice

	return nil
}

// QuestionnaireQuestionAnswerExists checks if the QuestionnaireQuestionAnswer row exists.
func QuestionnaireQuestionAnswerExists(ctx context.Context, exec boil.ContextExecutor, assigneeID string, questionnaireQuestionID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `questionnaire_question_answer` where `assignee_id`=? AND `questionnaire_question_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, assigneeID, questionnaireQuestionID)
	}
	row := exec.QueryRowContext(ctx, sql, assigneeID, questionnaireQuestionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if questionnaire_question_answer exists")
	}

	return exists, nil
}

// Exists checks if the QuestionnaireQuestionAnswer row exists.
func (o *QuestionnaireQuestionAnswer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return QuestionnaireQuestionAnswerExists(ctx, exec, o.AssigneeID, o.QuestionnaireQuestionID)
}
