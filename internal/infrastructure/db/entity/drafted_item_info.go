// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DraftedItemInfo is an object representing the database table.
type DraftedItemInfo struct {
	OfferItemID string `boil:"offer_item_id" json:"offer_item_id" toml:"offer_item_id" yaml:"offer_item_id"`
	// 商品情報の名前。
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`
	// 会社名。
	ContentName string `boil:"content_name" json:"content_name" toml:"content_name" yaml:"content_name"`
	// 商品画像URL。
	ImageURL string `boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	// 商品詳細のURL。
	URL string `boil:"url" json:"url" toml:"url" yaml:"url"`
	// 最小の報酬額
	MinCommission float64 `boil:"min_commission" json:"min_commission" toml:"min_commission" yaml:"min_commission"`
	// commissionのタイプ
	MinCommissionType int `boil:"min_commission_type" json:"min_commission_type" toml:"min_commission_type" yaml:"min_commission_type"`
	// 最大の報酬額。
	MaxCommission float64 `boil:"max_commission" json:"max_commission" toml:"max_commission" yaml:"max_commission"`
	// commissionのタイプ。
	MaxCommissionType int       `boil:"max_commission_type" json:"max_commission_type" toml:"max_commission_type" yaml:"max_commission_type"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt         null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *draftedItemInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L draftedItemInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DraftedItemInfoColumns = struct {
	OfferItemID       string
	Name              string
	ContentName       string
	ImageURL          string
	URL               string
	MinCommission     string
	MinCommissionType string
	MaxCommission     string
	MaxCommissionType string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	OfferItemID:       "offer_item_id",
	Name:              "name",
	ContentName:       "content_name",
	ImageURL:          "image_url",
	URL:               "url",
	MinCommission:     "min_commission",
	MinCommissionType: "min_commission_type",
	MaxCommission:     "max_commission",
	MaxCommissionType: "max_commission_type",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
}

var DraftedItemInfoTableColumns = struct {
	OfferItemID       string
	Name              string
	ContentName       string
	ImageURL          string
	URL               string
	MinCommission     string
	MinCommissionType string
	MaxCommission     string
	MaxCommissionType string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	OfferItemID:       "drafted_item_info.offer_item_id",
	Name:              "drafted_item_info.name",
	ContentName:       "drafted_item_info.content_name",
	ImageURL:          "drafted_item_info.image_url",
	URL:               "drafted_item_info.url",
	MinCommission:     "drafted_item_info.min_commission",
	MinCommissionType: "drafted_item_info.min_commission_type",
	MaxCommission:     "drafted_item_info.max_commission",
	MaxCommissionType: "drafted_item_info.max_commission_type",
	CreatedAt:         "drafted_item_info.created_at",
	UpdatedAt:         "drafted_item_info.updated_at",
	DeletedAt:         "drafted_item_info.deleted_at",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DraftedItemInfoWhere = struct {
	OfferItemID       whereHelperstring
	Name              whereHelperstring
	ContentName       whereHelperstring
	ImageURL          whereHelperstring
	URL               whereHelperstring
	MinCommission     whereHelperfloat64
	MinCommissionType whereHelperint
	MaxCommission     whereHelperfloat64
	MaxCommissionType whereHelperint
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	DeletedAt         whereHelpernull_Time
}{
	OfferItemID:       whereHelperstring{field: "`drafted_item_info`.`offer_item_id`"},
	Name:              whereHelperstring{field: "`drafted_item_info`.`name`"},
	ContentName:       whereHelperstring{field: "`drafted_item_info`.`content_name`"},
	ImageURL:          whereHelperstring{field: "`drafted_item_info`.`image_url`"},
	URL:               whereHelperstring{field: "`drafted_item_info`.`url`"},
	MinCommission:     whereHelperfloat64{field: "`drafted_item_info`.`min_commission`"},
	MinCommissionType: whereHelperint{field: "`drafted_item_info`.`min_commission_type`"},
	MaxCommission:     whereHelperfloat64{field: "`drafted_item_info`.`max_commission`"},
	MaxCommissionType: whereHelperint{field: "`drafted_item_info`.`max_commission_type`"},
	CreatedAt:         whereHelpertime_Time{field: "`drafted_item_info`.`created_at`"},
	UpdatedAt:         whereHelpertime_Time{field: "`drafted_item_info`.`updated_at`"},
	DeletedAt:         whereHelpernull_Time{field: "`drafted_item_info`.`deleted_at`"},
}

// DraftedItemInfoRels is where relationship names are stored.
var DraftedItemInfoRels = struct {
	OfferItem string
}{
	OfferItem: "OfferItem",
}

// draftedItemInfoR is where relationships are stored.
type draftedItemInfoR struct {
	OfferItem *OfferItem `boil:"OfferItem" json:"OfferItem" toml:"OfferItem" yaml:"OfferItem"`
}

// NewStruct creates a new relationship struct
func (*draftedItemInfoR) NewStruct() *draftedItemInfoR {
	return &draftedItemInfoR{}
}

func (r *draftedItemInfoR) GetOfferItem() *OfferItem {
	if r == nil {
		return nil
	}
	return r.OfferItem
}

// draftedItemInfoL is where Load methods for each relationship are stored.
type draftedItemInfoL struct{}

var (
	draftedItemInfoAllColumns            = []string{"offer_item_id", "name", "content_name", "image_url", "url", "min_commission", "min_commission_type", "max_commission", "max_commission_type", "created_at", "updated_at", "deleted_at"}
	draftedItemInfoColumnsWithoutDefault = []string{"offer_item_id", "name", "content_name", "image_url", "url", "min_commission", "min_commission_type", "max_commission", "max_commission_type", "created_at", "updated_at", "deleted_at"}
	draftedItemInfoColumnsWithDefault    = []string{}
	draftedItemInfoPrimaryKeyColumns     = []string{"offer_item_id"}
	draftedItemInfoGeneratedColumns      = []string{}
)

type (
	// DraftedItemInfoSlice is an alias for a slice of pointers to DraftedItemInfo.
	// This should almost always be used instead of []DraftedItemInfo.
	DraftedItemInfoSlice []*DraftedItemInfo
	// DraftedItemInfoHook is the signature for custom DraftedItemInfo hook methods
	DraftedItemInfoHook func(context.Context, boil.ContextExecutor, *DraftedItemInfo) error

	draftedItemInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	draftedItemInfoType                 = reflect.TypeOf(&DraftedItemInfo{})
	draftedItemInfoMapping              = queries.MakeStructMapping(draftedItemInfoType)
	draftedItemInfoPrimaryKeyMapping, _ = queries.BindMapping(draftedItemInfoType, draftedItemInfoMapping, draftedItemInfoPrimaryKeyColumns)
	draftedItemInfoInsertCacheMut       sync.RWMutex
	draftedItemInfoInsertCache          = make(map[string]insertCache)
	draftedItemInfoUpdateCacheMut       sync.RWMutex
	draftedItemInfoUpdateCache          = make(map[string]updateCache)
	draftedItemInfoUpsertCacheMut       sync.RWMutex
	draftedItemInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var draftedItemInfoAfterSelectMu sync.Mutex
var draftedItemInfoAfterSelectHooks []DraftedItemInfoHook

var draftedItemInfoBeforeInsertMu sync.Mutex
var draftedItemInfoBeforeInsertHooks []DraftedItemInfoHook
var draftedItemInfoAfterInsertMu sync.Mutex
var draftedItemInfoAfterInsertHooks []DraftedItemInfoHook

var draftedItemInfoBeforeUpdateMu sync.Mutex
var draftedItemInfoBeforeUpdateHooks []DraftedItemInfoHook
var draftedItemInfoAfterUpdateMu sync.Mutex
var draftedItemInfoAfterUpdateHooks []DraftedItemInfoHook

var draftedItemInfoBeforeDeleteMu sync.Mutex
var draftedItemInfoBeforeDeleteHooks []DraftedItemInfoHook
var draftedItemInfoAfterDeleteMu sync.Mutex
var draftedItemInfoAfterDeleteHooks []DraftedItemInfoHook

var draftedItemInfoBeforeUpsertMu sync.Mutex
var draftedItemInfoBeforeUpsertHooks []DraftedItemInfoHook
var draftedItemInfoAfterUpsertMu sync.Mutex
var draftedItemInfoAfterUpsertHooks []DraftedItemInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DraftedItemInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftedItemInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DraftedItemInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftedItemInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DraftedItemInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftedItemInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DraftedItemInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftedItemInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DraftedItemInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftedItemInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DraftedItemInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftedItemInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DraftedItemInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftedItemInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DraftedItemInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftedItemInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DraftedItemInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftedItemInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDraftedItemInfoHook registers your hook function for all future operations.
func AddDraftedItemInfoHook(hookPoint boil.HookPoint, draftedItemInfoHook DraftedItemInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		draftedItemInfoAfterSelectMu.Lock()
		draftedItemInfoAfterSelectHooks = append(draftedItemInfoAfterSelectHooks, draftedItemInfoHook)
		draftedItemInfoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		draftedItemInfoBeforeInsertMu.Lock()
		draftedItemInfoBeforeInsertHooks = append(draftedItemInfoBeforeInsertHooks, draftedItemInfoHook)
		draftedItemInfoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		draftedItemInfoAfterInsertMu.Lock()
		draftedItemInfoAfterInsertHooks = append(draftedItemInfoAfterInsertHooks, draftedItemInfoHook)
		draftedItemInfoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		draftedItemInfoBeforeUpdateMu.Lock()
		draftedItemInfoBeforeUpdateHooks = append(draftedItemInfoBeforeUpdateHooks, draftedItemInfoHook)
		draftedItemInfoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		draftedItemInfoAfterUpdateMu.Lock()
		draftedItemInfoAfterUpdateHooks = append(draftedItemInfoAfterUpdateHooks, draftedItemInfoHook)
		draftedItemInfoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		draftedItemInfoBeforeDeleteMu.Lock()
		draftedItemInfoBeforeDeleteHooks = append(draftedItemInfoBeforeDeleteHooks, draftedItemInfoHook)
		draftedItemInfoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		draftedItemInfoAfterDeleteMu.Lock()
		draftedItemInfoAfterDeleteHooks = append(draftedItemInfoAfterDeleteHooks, draftedItemInfoHook)
		draftedItemInfoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		draftedItemInfoBeforeUpsertMu.Lock()
		draftedItemInfoBeforeUpsertHooks = append(draftedItemInfoBeforeUpsertHooks, draftedItemInfoHook)
		draftedItemInfoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		draftedItemInfoAfterUpsertMu.Lock()
		draftedItemInfoAfterUpsertHooks = append(draftedItemInfoAfterUpsertHooks, draftedItemInfoHook)
		draftedItemInfoAfterUpsertMu.Unlock()
	}
}

// One returns a single draftedItemInfo record from the query.
func (q draftedItemInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DraftedItemInfo, error) {
	o := &DraftedItemInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for drafted_item_info")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DraftedItemInfo records from the query.
func (q draftedItemInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (DraftedItemInfoSlice, error) {
	var o []*DraftedItemInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to DraftedItemInfo slice")
	}

	if len(draftedItemInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DraftedItemInfo records in the query.
func (q draftedItemInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count drafted_item_info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q draftedItemInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if drafted_item_info exists")
	}

	return count > 0, nil
}

// OfferItem pointed to by the foreign key.
func (o *DraftedItemInfo) OfferItem(mods ...qm.QueryMod) offerItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OfferItemID),
	}

	queryMods = append(queryMods, mods...)

	return OfferItems(queryMods...)
}

// LoadOfferItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (draftedItemInfoL) LoadOfferItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDraftedItemInfo interface{}, mods queries.Applicator) error {
	var slice []*DraftedItemInfo
	var object *DraftedItemInfo

	if singular {
		var ok bool
		object, ok = maybeDraftedItemInfo.(*DraftedItemInfo)
		if !ok {
			object = new(DraftedItemInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDraftedItemInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDraftedItemInfo))
			}
		}
	} else {
		s, ok := maybeDraftedItemInfo.(*[]*DraftedItemInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDraftedItemInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDraftedItemInfo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &draftedItemInfoR{}
		}
		args[object.OfferItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &draftedItemInfoR{}
			}

			args[obj.OfferItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`offer_item`),
		qm.WhereIn(`offer_item.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`offer_item.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OfferItem")
	}

	var resultSlice []*OfferItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OfferItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for offer_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offer_item")
	}

	if len(offerItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OfferItem = foreign
		if foreign.R == nil {
			foreign.R = &offerItemR{}
		}
		foreign.R.DraftedItemInfo = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfferItemID == foreign.ID {
				local.R.OfferItem = foreign
				if foreign.R == nil {
					foreign.R = &offerItemR{}
				}
				foreign.R.DraftedItemInfo = local
				break
			}
		}
	}

	return nil
}

// SetOfferItem of the draftedItemInfo to the related item.
// Sets o.R.OfferItem to related.
// Adds o to related.R.DraftedItemInfo.
func (o *DraftedItemInfo) SetOfferItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OfferItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `drafted_item_info` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
		strmangle.WhereClause("`", "`", 0, draftedItemInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.OfferItemID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfferItemID = related.ID
	if o.R == nil {
		o.R = &draftedItemInfoR{
			OfferItem: related,
		}
	} else {
		o.R.OfferItem = related
	}

	if related.R == nil {
		related.R = &offerItemR{
			DraftedItemInfo: o,
		}
	} else {
		related.R.DraftedItemInfo = o
	}

	return nil
}

// DraftedItemInfos retrieves all the records using an executor.
func DraftedItemInfos(mods ...qm.QueryMod) draftedItemInfoQuery {
	mods = append(mods, qm.From("`drafted_item_info`"), qmhelper.WhereIsNull("`drafted_item_info`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`drafted_item_info`.*"})
	}

	return draftedItemInfoQuery{q}
}

// FindDraftedItemInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDraftedItemInfo(ctx context.Context, exec boil.ContextExecutor, offerItemID string, selectCols ...string) (*DraftedItemInfo, error) {
	draftedItemInfoObj := &DraftedItemInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `drafted_item_info` where `offer_item_id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, offerItemID)

	err := q.Bind(ctx, exec, draftedItemInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from drafted_item_info")
	}

	if err = draftedItemInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return draftedItemInfoObj, err
	}

	return draftedItemInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DraftedItemInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no drafted_item_info provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(draftedItemInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	draftedItemInfoInsertCacheMut.RLock()
	cache, cached := draftedItemInfoInsertCache[key]
	draftedItemInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			draftedItemInfoAllColumns,
			draftedItemInfoColumnsWithDefault,
			draftedItemInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(draftedItemInfoType, draftedItemInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(draftedItemInfoType, draftedItemInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `drafted_item_info` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `drafted_item_info` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `drafted_item_info` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, draftedItemInfoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into drafted_item_info")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OfferItemID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for drafted_item_info")
	}

CacheNoHooks:
	if !cached {
		draftedItemInfoInsertCacheMut.Lock()
		draftedItemInfoInsertCache[key] = cache
		draftedItemInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DraftedItemInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DraftedItemInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	draftedItemInfoUpdateCacheMut.RLock()
	cache, cached := draftedItemInfoUpdateCache[key]
	draftedItemInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			draftedItemInfoAllColumns,
			draftedItemInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update drafted_item_info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `drafted_item_info` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, draftedItemInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(draftedItemInfoType, draftedItemInfoMapping, append(wl, draftedItemInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update drafted_item_info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for drafted_item_info")
	}

	if !cached {
		draftedItemInfoUpdateCacheMut.Lock()
		draftedItemInfoUpdateCache[key] = cache
		draftedItemInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q draftedItemInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for drafted_item_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for drafted_item_info")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DraftedItemInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), draftedItemInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `drafted_item_info` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, draftedItemInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in draftedItemInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all draftedItemInfo")
	}
	return rowsAff, nil
}

var mySQLDraftedItemInfoUniqueColumns = []string{
	"offer_item_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DraftedItemInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no drafted_item_info provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(draftedItemInfoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDraftedItemInfoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	draftedItemInfoUpsertCacheMut.RLock()
	cache, cached := draftedItemInfoUpsertCache[key]
	draftedItemInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			draftedItemInfoAllColumns,
			draftedItemInfoColumnsWithDefault,
			draftedItemInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			draftedItemInfoAllColumns,
			draftedItemInfoPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entity: unable to upsert drafted_item_info, could not build update column list")
		}

		ret := strmangle.SetComplement(draftedItemInfoAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`drafted_item_info`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `drafted_item_info` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(draftedItemInfoType, draftedItemInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(draftedItemInfoType, draftedItemInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for drafted_item_info")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(draftedItemInfoType, draftedItemInfoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for drafted_item_info")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for drafted_item_info")
	}

CacheNoHooks:
	if !cached {
		draftedItemInfoUpsertCacheMut.Lock()
		draftedItemInfoUpsertCache[key] = cache
		draftedItemInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DraftedItemInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DraftedItemInfo) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no DraftedItemInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), draftedItemInfoPrimaryKeyMapping)
		sql = "DELETE FROM `drafted_item_info` WHERE `offer_item_id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `drafted_item_info` SET %s WHERE `offer_item_id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(draftedItemInfoType, draftedItemInfoMapping, append(wl, draftedItemInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from drafted_item_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for drafted_item_info")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q draftedItemInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no draftedItemInfoQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from drafted_item_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for drafted_item_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DraftedItemInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(draftedItemInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), draftedItemInfoPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `drafted_item_info` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, draftedItemInfoPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), draftedItemInfoPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `drafted_item_info` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, draftedItemInfoPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from draftedItemInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for drafted_item_info")
	}

	if len(draftedItemInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DraftedItemInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDraftedItemInfo(ctx, exec, o.OfferItemID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DraftedItemInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DraftedItemInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), draftedItemInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `drafted_item_info`.* FROM `drafted_item_info` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, draftedItemInfoPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in DraftedItemInfoSlice")
	}

	*o = slice

	return nil
}

// DraftedItemInfoExists checks if the DraftedItemInfo row exists.
func DraftedItemInfoExists(ctx context.Context, exec boil.ContextExecutor, offerItemID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `drafted_item_info` where `offer_item_id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, offerItemID)
	}
	row := exec.QueryRowContext(ctx, sql, offerItemID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if drafted_item_info exists")
	}

	return exists, nil
}

// Exists checks if the DraftedItemInfo row exists.
func (o *DraftedItemInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DraftedItemInfoExists(ctx, exec, o.OfferItemID)
}
