// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OfferItem is an object representing the database table.
type OfferItem struct {
	ID                                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                              string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	ItemID                            string      `boil:"item_id" json:"item_id" toml:"item_id" yaml:"item_id"`
	DFItemID                          null.String `boil:"df_item_id" json:"df_item_id,omitempty" toml:"df_item_id" yaml:"df_item_id,omitempty"`
	CouponBannerID                    null.String `boil:"coupon_banner_id" json:"coupon_banner_id,omitempty" toml:"coupon_banner_id" yaml:"coupon_banner_id,omitempty"`
	SpecialRate                       float64     `boil:"special_rate" json:"special_rate" toml:"special_rate" yaml:"special_rate"`
	SpecialAmount                     int         `boil:"special_amount" json:"special_amount" toml:"special_amount" yaml:"special_amount"`
	HasSample                         bool        `boil:"has_sample" json:"has_sample" toml:"has_sample" yaml:"has_sample"`
	NeedsPreliminaryReview            bool        `boil:"needs_preliminary_review" json:"needs_preliminary_review" toml:"needs_preliminary_review" yaml:"needs_preliminary_review"`
	NeedsAfterReview                  bool        `boil:"needs_after_review" json:"needs_after_review" toml:"needs_after_review" yaml:"needs_after_review"`
	NeedsPRMark                       bool        `boil:"needs_pr_mark" json:"needs_pr_mark" toml:"needs_pr_mark" yaml:"needs_pr_mark"`
	PostRequired                      bool        `boil:"post_required" json:"post_required" toml:"post_required" yaml:"post_required"`
	PostTarget                        uint        `boil:"post_target" json:"post_target" toml:"post_target" yaml:"post_target"`
	HasCoupon                         bool        `boil:"has_coupon" json:"has_coupon" toml:"has_coupon" yaml:"has_coupon"`
	HasSpecialCommission              bool        `boil:"has_special_commission" json:"has_special_commission" toml:"has_special_commission" yaml:"has_special_commission"`
	HasLottery                        bool        `boil:"has_lottery" json:"has_lottery" toml:"has_lottery" yaml:"has_lottery"`
	ProductFeatures                   string      `boil:"product_features" json:"product_features" toml:"product_features" yaml:"product_features"`
	CautionaryPoints                  string      `boil:"cautionary_points" json:"cautionary_points" toml:"cautionary_points" yaml:"cautionary_points"`
	ReferenceInfo                     string      `boil:"reference_info" json:"reference_info" toml:"reference_info" yaml:"reference_info"`
	OtherInfo                         string      `boil:"other_info" json:"other_info" toml:"other_info" yaml:"other_info"`
	IsInvitationMailSent              bool        `boil:"is_invitation_mail_sent" json:"is_invitation_mail_sent" toml:"is_invitation_mail_sent" yaml:"is_invitation_mail_sent"`
	IsOfferDetailMailSent             bool        `boil:"is_offer_detail_mail_sent" json:"is_offer_detail_mail_sent" toml:"is_offer_detail_mail_sent" yaml:"is_offer_detail_mail_sent"`
	IsPassedPreliminaryReviewMailSent bool        `boil:"is_passed_preliminary_review_mail_sent" json:"is_passed_preliminary_review_mail_sent" toml:"is_passed_preliminary_review_mail_sent" yaml:"is_passed_preliminary_review_mail_sent"`
	IsFailedPreliminaryReviewMailSent bool        `boil:"is_failed_preliminary_review_mail_sent" json:"is_failed_preliminary_review_mail_sent" toml:"is_failed_preliminary_review_mail_sent" yaml:"is_failed_preliminary_review_mail_sent"`
	IsArticlePostMailSent             bool        `boil:"is_article_post_mail_sent" json:"is_article_post_mail_sent" toml:"is_article_post_mail_sent" yaml:"is_article_post_mail_sent"`
	IsPassedAfterReviewMailSent       bool        `boil:"is_passed_after_review_mail_sent" json:"is_passed_after_review_mail_sent" toml:"is_passed_after_review_mail_sent" yaml:"is_passed_after_review_mail_sent"`
	IsFailedAfterReviewMailSent       bool        `boil:"is_failed_after_review_mail_sent" json:"is_failed_after_review_mail_sent" toml:"is_failed_after_review_mail_sent" yaml:"is_failed_after_review_mail_sent"`
	IsClosed                          bool        `boil:"is_closed" json:"is_closed" toml:"is_closed" yaml:"is_closed"`
	CreatedAt                         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy                         string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedAt                         time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy                         string      `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	DeletedAt                         null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	DeletedBy                         null.String `boil:"deleted_by" json:"deleted_by,omitempty" toml:"deleted_by" yaml:"deleted_by,omitempty"`

	R *offerItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L offerItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OfferItemColumns = struct {
	ID                                string
	Name                              string
	ItemID                            string
	DFItemID                          string
	CouponBannerID                    string
	SpecialRate                       string
	SpecialAmount                     string
	HasSample                         string
	NeedsPreliminaryReview            string
	NeedsAfterReview                  string
	NeedsPRMark                       string
	PostRequired                      string
	PostTarget                        string
	HasCoupon                         string
	HasSpecialCommission              string
	HasLottery                        string
	ProductFeatures                   string
	CautionaryPoints                  string
	ReferenceInfo                     string
	OtherInfo                         string
	IsInvitationMailSent              string
	IsOfferDetailMailSent             string
	IsPassedPreliminaryReviewMailSent string
	IsFailedPreliminaryReviewMailSent string
	IsArticlePostMailSent             string
	IsPassedAfterReviewMailSent       string
	IsFailedAfterReviewMailSent       string
	IsClosed                          string
	CreatedAt                         string
	CreatedBy                         string
	UpdatedAt                         string
	UpdatedBy                         string
	DeletedAt                         string
	DeletedBy                         string
}{
	ID:                                "id",
	Name:                              "name",
	ItemID:                            "item_id",
	DFItemID:                          "df_item_id",
	CouponBannerID:                    "coupon_banner_id",
	SpecialRate:                       "special_rate",
	SpecialAmount:                     "special_amount",
	HasSample:                         "has_sample",
	NeedsPreliminaryReview:            "needs_preliminary_review",
	NeedsAfterReview:                  "needs_after_review",
	NeedsPRMark:                       "needs_pr_mark",
	PostRequired:                      "post_required",
	PostTarget:                        "post_target",
	HasCoupon:                         "has_coupon",
	HasSpecialCommission:              "has_special_commission",
	HasLottery:                        "has_lottery",
	ProductFeatures:                   "product_features",
	CautionaryPoints:                  "cautionary_points",
	ReferenceInfo:                     "reference_info",
	OtherInfo:                         "other_info",
	IsInvitationMailSent:              "is_invitation_mail_sent",
	IsOfferDetailMailSent:             "is_offer_detail_mail_sent",
	IsPassedPreliminaryReviewMailSent: "is_passed_preliminary_review_mail_sent",
	IsFailedPreliminaryReviewMailSent: "is_failed_preliminary_review_mail_sent",
	IsArticlePostMailSent:             "is_article_post_mail_sent",
	IsPassedAfterReviewMailSent:       "is_passed_after_review_mail_sent",
	IsFailedAfterReviewMailSent:       "is_failed_after_review_mail_sent",
	IsClosed:                          "is_closed",
	CreatedAt:                         "created_at",
	CreatedBy:                         "created_by",
	UpdatedAt:                         "updated_at",
	UpdatedBy:                         "updated_by",
	DeletedAt:                         "deleted_at",
	DeletedBy:                         "deleted_by",
}

var OfferItemTableColumns = struct {
	ID                                string
	Name                              string
	ItemID                            string
	DFItemID                          string
	CouponBannerID                    string
	SpecialRate                       string
	SpecialAmount                     string
	HasSample                         string
	NeedsPreliminaryReview            string
	NeedsAfterReview                  string
	NeedsPRMark                       string
	PostRequired                      string
	PostTarget                        string
	HasCoupon                         string
	HasSpecialCommission              string
	HasLottery                        string
	ProductFeatures                   string
	CautionaryPoints                  string
	ReferenceInfo                     string
	OtherInfo                         string
	IsInvitationMailSent              string
	IsOfferDetailMailSent             string
	IsPassedPreliminaryReviewMailSent string
	IsFailedPreliminaryReviewMailSent string
	IsArticlePostMailSent             string
	IsPassedAfterReviewMailSent       string
	IsFailedAfterReviewMailSent       string
	IsClosed                          string
	CreatedAt                         string
	CreatedBy                         string
	UpdatedAt                         string
	UpdatedBy                         string
	DeletedAt                         string
	DeletedBy                         string
}{
	ID:                                "offer_item.id",
	Name:                              "offer_item.name",
	ItemID:                            "offer_item.item_id",
	DFItemID:                          "offer_item.df_item_id",
	CouponBannerID:                    "offer_item.coupon_banner_id",
	SpecialRate:                       "offer_item.special_rate",
	SpecialAmount:                     "offer_item.special_amount",
	HasSample:                         "offer_item.has_sample",
	NeedsPreliminaryReview:            "offer_item.needs_preliminary_review",
	NeedsAfterReview:                  "offer_item.needs_after_review",
	NeedsPRMark:                       "offer_item.needs_pr_mark",
	PostRequired:                      "offer_item.post_required",
	PostTarget:                        "offer_item.post_target",
	HasCoupon:                         "offer_item.has_coupon",
	HasSpecialCommission:              "offer_item.has_special_commission",
	HasLottery:                        "offer_item.has_lottery",
	ProductFeatures:                   "offer_item.product_features",
	CautionaryPoints:                  "offer_item.cautionary_points",
	ReferenceInfo:                     "offer_item.reference_info",
	OtherInfo:                         "offer_item.other_info",
	IsInvitationMailSent:              "offer_item.is_invitation_mail_sent",
	IsOfferDetailMailSent:             "offer_item.is_offer_detail_mail_sent",
	IsPassedPreliminaryReviewMailSent: "offer_item.is_passed_preliminary_review_mail_sent",
	IsFailedPreliminaryReviewMailSent: "offer_item.is_failed_preliminary_review_mail_sent",
	IsArticlePostMailSent:             "offer_item.is_article_post_mail_sent",
	IsPassedAfterReviewMailSent:       "offer_item.is_passed_after_review_mail_sent",
	IsFailedAfterReviewMailSent:       "offer_item.is_failed_after_review_mail_sent",
	IsClosed:                          "offer_item.is_closed",
	CreatedAt:                         "offer_item.created_at",
	CreatedBy:                         "offer_item.created_by",
	UpdatedAt:                         "offer_item.updated_at",
	UpdatedBy:                         "offer_item.updated_by",
	DeletedAt:                         "offer_item.deleted_at",
	DeletedBy:                         "offer_item.deleted_by",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var OfferItemWhere = struct {
	ID                                whereHelperstring
	Name                              whereHelperstring
	ItemID                            whereHelperstring
	DFItemID                          whereHelpernull_String
	CouponBannerID                    whereHelpernull_String
	SpecialRate                       whereHelperfloat64
	SpecialAmount                     whereHelperint
	HasSample                         whereHelperbool
	NeedsPreliminaryReview            whereHelperbool
	NeedsAfterReview                  whereHelperbool
	NeedsPRMark                       whereHelperbool
	PostRequired                      whereHelperbool
	PostTarget                        whereHelperuint
	HasCoupon                         whereHelperbool
	HasSpecialCommission              whereHelperbool
	HasLottery                        whereHelperbool
	ProductFeatures                   whereHelperstring
	CautionaryPoints                  whereHelperstring
	ReferenceInfo                     whereHelperstring
	OtherInfo                         whereHelperstring
	IsInvitationMailSent              whereHelperbool
	IsOfferDetailMailSent             whereHelperbool
	IsPassedPreliminaryReviewMailSent whereHelperbool
	IsFailedPreliminaryReviewMailSent whereHelperbool
	IsArticlePostMailSent             whereHelperbool
	IsPassedAfterReviewMailSent       whereHelperbool
	IsFailedAfterReviewMailSent       whereHelperbool
	IsClosed                          whereHelperbool
	CreatedAt                         whereHelpertime_Time
	CreatedBy                         whereHelperstring
	UpdatedAt                         whereHelpertime_Time
	UpdatedBy                         whereHelperstring
	DeletedAt                         whereHelpernull_Time
	DeletedBy                         whereHelpernull_String
}{
	ID:                                whereHelperstring{field: "`offer_item`.`id`"},
	Name:                              whereHelperstring{field: "`offer_item`.`name`"},
	ItemID:                            whereHelperstring{field: "`offer_item`.`item_id`"},
	DFItemID:                          whereHelpernull_String{field: "`offer_item`.`df_item_id`"},
	CouponBannerID:                    whereHelpernull_String{field: "`offer_item`.`coupon_banner_id`"},
	SpecialRate:                       whereHelperfloat64{field: "`offer_item`.`special_rate`"},
	SpecialAmount:                     whereHelperint{field: "`offer_item`.`special_amount`"},
	HasSample:                         whereHelperbool{field: "`offer_item`.`has_sample`"},
	NeedsPreliminaryReview:            whereHelperbool{field: "`offer_item`.`needs_preliminary_review`"},
	NeedsAfterReview:                  whereHelperbool{field: "`offer_item`.`needs_after_review`"},
	NeedsPRMark:                       whereHelperbool{field: "`offer_item`.`needs_pr_mark`"},
	PostRequired:                      whereHelperbool{field: "`offer_item`.`post_required`"},
	PostTarget:                        whereHelperuint{field: "`offer_item`.`post_target`"},
	HasCoupon:                         whereHelperbool{field: "`offer_item`.`has_coupon`"},
	HasSpecialCommission:              whereHelperbool{field: "`offer_item`.`has_special_commission`"},
	HasLottery:                        whereHelperbool{field: "`offer_item`.`has_lottery`"},
	ProductFeatures:                   whereHelperstring{field: "`offer_item`.`product_features`"},
	CautionaryPoints:                  whereHelperstring{field: "`offer_item`.`cautionary_points`"},
	ReferenceInfo:                     whereHelperstring{field: "`offer_item`.`reference_info`"},
	OtherInfo:                         whereHelperstring{field: "`offer_item`.`other_info`"},
	IsInvitationMailSent:              whereHelperbool{field: "`offer_item`.`is_invitation_mail_sent`"},
	IsOfferDetailMailSent:             whereHelperbool{field: "`offer_item`.`is_offer_detail_mail_sent`"},
	IsPassedPreliminaryReviewMailSent: whereHelperbool{field: "`offer_item`.`is_passed_preliminary_review_mail_sent`"},
	IsFailedPreliminaryReviewMailSent: whereHelperbool{field: "`offer_item`.`is_failed_preliminary_review_mail_sent`"},
	IsArticlePostMailSent:             whereHelperbool{field: "`offer_item`.`is_article_post_mail_sent`"},
	IsPassedAfterReviewMailSent:       whereHelperbool{field: "`offer_item`.`is_passed_after_review_mail_sent`"},
	IsFailedAfterReviewMailSent:       whereHelperbool{field: "`offer_item`.`is_failed_after_review_mail_sent`"},
	IsClosed:                          whereHelperbool{field: "`offer_item`.`is_closed`"},
	CreatedAt:                         whereHelpertime_Time{field: "`offer_item`.`created_at`"},
	CreatedBy:                         whereHelperstring{field: "`offer_item`.`created_by`"},
	UpdatedAt:                         whereHelpertime_Time{field: "`offer_item`.`updated_at`"},
	UpdatedBy:                         whereHelperstring{field: "`offer_item`.`updated_by`"},
	DeletedAt:                         whereHelpernull_Time{field: "`offer_item`.`deleted_at`"},
	DeletedBy:                         whereHelpernull_String{field: "`offer_item`.`deleted_by`"},
}

// OfferItemRels is where relationship names are stored.
var OfferItemRels = struct {
	DraftedItemInfo              string
	Questionnaire                string
	Assignees                    string
	Examinations                 string
	QuestionnaireQuestions       string
	QuestionnaireQuestionAnswers string
	Schedules                    string
}{
	DraftedItemInfo:              "DraftedItemInfo",
	Questionnaire:                "Questionnaire",
	Assignees:                    "Assignees",
	Examinations:                 "Examinations",
	QuestionnaireQuestions:       "QuestionnaireQuestions",
	QuestionnaireQuestionAnswers: "QuestionnaireQuestionAnswers",
	Schedules:                    "Schedules",
}

// offerItemR is where relationships are stored.
type offerItemR struct {
	DraftedItemInfo              *DraftedItemInfo                 `boil:"DraftedItemInfo" json:"DraftedItemInfo" toml:"DraftedItemInfo" yaml:"DraftedItemInfo"`
	Questionnaire                *Questionnaire                   `boil:"Questionnaire" json:"Questionnaire" toml:"Questionnaire" yaml:"Questionnaire"`
	Assignees                    AssigneeSlice                    `boil:"Assignees" json:"Assignees" toml:"Assignees" yaml:"Assignees"`
	Examinations                 ExaminationSlice                 `boil:"Examinations" json:"Examinations" toml:"Examinations" yaml:"Examinations"`
	QuestionnaireQuestions       QuestionnaireQuestionSlice       `boil:"QuestionnaireQuestions" json:"QuestionnaireQuestions" toml:"QuestionnaireQuestions" yaml:"QuestionnaireQuestions"`
	QuestionnaireQuestionAnswers QuestionnaireQuestionAnswerSlice `boil:"QuestionnaireQuestionAnswers" json:"QuestionnaireQuestionAnswers" toml:"QuestionnaireQuestionAnswers" yaml:"QuestionnaireQuestionAnswers"`
	Schedules                    ScheduleSlice                    `boil:"Schedules" json:"Schedules" toml:"Schedules" yaml:"Schedules"`
}

// NewStruct creates a new relationship struct
func (*offerItemR) NewStruct() *offerItemR {
	return &offerItemR{}
}

func (r *offerItemR) GetDraftedItemInfo() *DraftedItemInfo {
	if r == nil {
		return nil
	}
	return r.DraftedItemInfo
}

func (r *offerItemR) GetQuestionnaire() *Questionnaire {
	if r == nil {
		return nil
	}
	return r.Questionnaire
}

func (r *offerItemR) GetAssignees() AssigneeSlice {
	if r == nil {
		return nil
	}
	return r.Assignees
}

func (r *offerItemR) GetExaminations() ExaminationSlice {
	if r == nil {
		return nil
	}
	return r.Examinations
}

func (r *offerItemR) GetQuestionnaireQuestions() QuestionnaireQuestionSlice {
	if r == nil {
		return nil
	}
	return r.QuestionnaireQuestions
}

func (r *offerItemR) GetQuestionnaireQuestionAnswers() QuestionnaireQuestionAnswerSlice {
	if r == nil {
		return nil
	}
	return r.QuestionnaireQuestionAnswers
}

func (r *offerItemR) GetSchedules() ScheduleSlice {
	if r == nil {
		return nil
	}
	return r.Schedules
}

// offerItemL is where Load methods for each relationship are stored.
type offerItemL struct{}

var (
	offerItemAllColumns            = []string{"id", "name", "item_id", "df_item_id", "coupon_banner_id", "special_rate", "special_amount", "has_sample", "needs_preliminary_review", "needs_after_review", "needs_pr_mark", "post_required", "post_target", "has_coupon", "has_special_commission", "has_lottery", "product_features", "cautionary_points", "reference_info", "other_info", "is_invitation_mail_sent", "is_offer_detail_mail_sent", "is_passed_preliminary_review_mail_sent", "is_failed_preliminary_review_mail_sent", "is_article_post_mail_sent", "is_passed_after_review_mail_sent", "is_failed_after_review_mail_sent", "is_closed", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by"}
	offerItemColumnsWithoutDefault = []string{"id", "name", "item_id", "df_item_id", "coupon_banner_id", "special_rate", "special_amount", "has_sample", "needs_preliminary_review", "needs_after_review", "post_required", "post_target", "has_coupon", "has_special_commission", "has_lottery", "product_features", "cautionary_points", "reference_info", "other_info", "is_invitation_mail_sent", "is_offer_detail_mail_sent", "is_passed_preliminary_review_mail_sent", "is_failed_preliminary_review_mail_sent", "is_article_post_mail_sent", "is_passed_after_review_mail_sent", "is_failed_after_review_mail_sent", "is_closed", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by"}
	offerItemColumnsWithDefault    = []string{"needs_pr_mark"}
	offerItemPrimaryKeyColumns     = []string{"id"}
	offerItemGeneratedColumns      = []string{}
)

type (
	// OfferItemSlice is an alias for a slice of pointers to OfferItem.
	// This should almost always be used instead of []OfferItem.
	OfferItemSlice []*OfferItem
	// OfferItemHook is the signature for custom OfferItem hook methods
	OfferItemHook func(context.Context, boil.ContextExecutor, *OfferItem) error

	offerItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	offerItemType                 = reflect.TypeOf(&OfferItem{})
	offerItemMapping              = queries.MakeStructMapping(offerItemType)
	offerItemPrimaryKeyMapping, _ = queries.BindMapping(offerItemType, offerItemMapping, offerItemPrimaryKeyColumns)
	offerItemInsertCacheMut       sync.RWMutex
	offerItemInsertCache          = make(map[string]insertCache)
	offerItemUpdateCacheMut       sync.RWMutex
	offerItemUpdateCache          = make(map[string]updateCache)
	offerItemUpsertCacheMut       sync.RWMutex
	offerItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var offerItemAfterSelectMu sync.Mutex
var offerItemAfterSelectHooks []OfferItemHook

var offerItemBeforeInsertMu sync.Mutex
var offerItemBeforeInsertHooks []OfferItemHook
var offerItemAfterInsertMu sync.Mutex
var offerItemAfterInsertHooks []OfferItemHook

var offerItemBeforeUpdateMu sync.Mutex
var offerItemBeforeUpdateHooks []OfferItemHook
var offerItemAfterUpdateMu sync.Mutex
var offerItemAfterUpdateHooks []OfferItemHook

var offerItemBeforeDeleteMu sync.Mutex
var offerItemBeforeDeleteHooks []OfferItemHook
var offerItemAfterDeleteMu sync.Mutex
var offerItemAfterDeleteHooks []OfferItemHook

var offerItemBeforeUpsertMu sync.Mutex
var offerItemBeforeUpsertHooks []OfferItemHook
var offerItemAfterUpsertMu sync.Mutex
var offerItemAfterUpsertHooks []OfferItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OfferItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offerItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OfferItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offerItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OfferItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offerItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OfferItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offerItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OfferItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offerItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OfferItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offerItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OfferItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offerItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OfferItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offerItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OfferItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range offerItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOfferItemHook registers your hook function for all future operations.
func AddOfferItemHook(hookPoint boil.HookPoint, offerItemHook OfferItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		offerItemAfterSelectMu.Lock()
		offerItemAfterSelectHooks = append(offerItemAfterSelectHooks, offerItemHook)
		offerItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		offerItemBeforeInsertMu.Lock()
		offerItemBeforeInsertHooks = append(offerItemBeforeInsertHooks, offerItemHook)
		offerItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		offerItemAfterInsertMu.Lock()
		offerItemAfterInsertHooks = append(offerItemAfterInsertHooks, offerItemHook)
		offerItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		offerItemBeforeUpdateMu.Lock()
		offerItemBeforeUpdateHooks = append(offerItemBeforeUpdateHooks, offerItemHook)
		offerItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		offerItemAfterUpdateMu.Lock()
		offerItemAfterUpdateHooks = append(offerItemAfterUpdateHooks, offerItemHook)
		offerItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		offerItemBeforeDeleteMu.Lock()
		offerItemBeforeDeleteHooks = append(offerItemBeforeDeleteHooks, offerItemHook)
		offerItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		offerItemAfterDeleteMu.Lock()
		offerItemAfterDeleteHooks = append(offerItemAfterDeleteHooks, offerItemHook)
		offerItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		offerItemBeforeUpsertMu.Lock()
		offerItemBeforeUpsertHooks = append(offerItemBeforeUpsertHooks, offerItemHook)
		offerItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		offerItemAfterUpsertMu.Lock()
		offerItemAfterUpsertHooks = append(offerItemAfterUpsertHooks, offerItemHook)
		offerItemAfterUpsertMu.Unlock()
	}
}

// One returns a single offerItem record from the query.
func (q offerItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OfferItem, error) {
	o := &OfferItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for offer_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OfferItem records from the query.
func (q offerItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (OfferItemSlice, error) {
	var o []*OfferItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to OfferItem slice")
	}

	if len(offerItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OfferItem records in the query.
func (q offerItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count offer_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q offerItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if offer_item exists")
	}

	return count > 0, nil
}

// DraftedItemInfo pointed to by the foreign key.
func (o *OfferItem) DraftedItemInfo(mods ...qm.QueryMod) draftedItemInfoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`offer_item_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return DraftedItemInfos(queryMods...)
}

// Questionnaire pointed to by the foreign key.
func (o *OfferItem) Questionnaire(mods ...qm.QueryMod) questionnaireQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`offer_item_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Questionnaires(queryMods...)
}

// Assignees retrieves all the assignee's Assignees with an executor.
func (o *OfferItem) Assignees(mods ...qm.QueryMod) assigneeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`assignee`.`offer_item_id`=?", o.ID),
	)

	return Assignees(queryMods...)
}

// Examinations retrieves all the examination's Examinations with an executor.
func (o *OfferItem) Examinations(mods ...qm.QueryMod) examinationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`examination`.`offer_item_id`=?", o.ID),
	)

	return Examinations(queryMods...)
}

// QuestionnaireQuestions retrieves all the questionnaire_question's QuestionnaireQuestions with an executor.
func (o *OfferItem) QuestionnaireQuestions(mods ...qm.QueryMod) questionnaireQuestionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`questionnaire_question`.`offer_item_id`=?", o.ID),
	)

	return QuestionnaireQuestions(queryMods...)
}

// QuestionnaireQuestionAnswers retrieves all the questionnaire_question_answer's QuestionnaireQuestionAnswers with an executor.
func (o *OfferItem) QuestionnaireQuestionAnswers(mods ...qm.QueryMod) questionnaireQuestionAnswerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`questionnaire_question_answer`.`offer_item_id`=?", o.ID),
	)

	return QuestionnaireQuestionAnswers(queryMods...)
}

// Schedules retrieves all the schedule's Schedules with an executor.
func (o *OfferItem) Schedules(mods ...qm.QueryMod) scheduleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`schedule`.`offer_item_id`=?", o.ID),
	)

	return Schedules(queryMods...)
}

// LoadDraftedItemInfo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (offerItemL) LoadDraftedItemInfo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOfferItem interface{}, mods queries.Applicator) error {
	var slice []*OfferItem
	var object *OfferItem

	if singular {
		var ok bool
		object, ok = maybeOfferItem.(*OfferItem)
		if !ok {
			object = new(OfferItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOfferItem))
			}
		}
	} else {
		s, ok := maybeOfferItem.(*[]*OfferItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOfferItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerItemR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`drafted_item_info`),
		qm.WhereIn(`drafted_item_info.offer_item_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`drafted_item_info.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DraftedItemInfo")
	}

	var resultSlice []*DraftedItemInfo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DraftedItemInfo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for drafted_item_info")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for drafted_item_info")
	}

	if len(draftedItemInfoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DraftedItemInfo = foreign
		if foreign.R == nil {
			foreign.R = &draftedItemInfoR{}
		}
		foreign.R.OfferItem = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OfferItemID {
				local.R.DraftedItemInfo = foreign
				if foreign.R == nil {
					foreign.R = &draftedItemInfoR{}
				}
				foreign.R.OfferItem = local
				break
			}
		}
	}

	return nil
}

// LoadQuestionnaire allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (offerItemL) LoadQuestionnaire(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOfferItem interface{}, mods queries.Applicator) error {
	var slice []*OfferItem
	var object *OfferItem

	if singular {
		var ok bool
		object, ok = maybeOfferItem.(*OfferItem)
		if !ok {
			object = new(OfferItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOfferItem))
			}
		}
	} else {
		s, ok := maybeOfferItem.(*[]*OfferItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOfferItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerItemR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`questionnaire`),
		qm.WhereIn(`questionnaire.offer_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Questionnaire")
	}

	var resultSlice []*Questionnaire
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Questionnaire")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for questionnaire")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for questionnaire")
	}

	if len(questionnaireAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Questionnaire = foreign
		if foreign.R == nil {
			foreign.R = &questionnaireR{}
		}
		foreign.R.OfferItem = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.OfferItemID {
				local.R.Questionnaire = foreign
				if foreign.R == nil {
					foreign.R = &questionnaireR{}
				}
				foreign.R.OfferItem = local
				break
			}
		}
	}

	return nil
}

// LoadAssignees allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (offerItemL) LoadAssignees(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOfferItem interface{}, mods queries.Applicator) error {
	var slice []*OfferItem
	var object *OfferItem

	if singular {
		var ok bool
		object, ok = maybeOfferItem.(*OfferItem)
		if !ok {
			object = new(OfferItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOfferItem))
			}
		}
	} else {
		s, ok := maybeOfferItem.(*[]*OfferItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOfferItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`assignee`),
		qm.WhereIn(`assignee.offer_item_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`assignee.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assignee")
	}

	var resultSlice []*Assignee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assignee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assignee")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assignee")
	}

	if len(assigneeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Assignees = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assigneeR{}
			}
			foreign.R.OfferItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OfferItemID {
				local.R.Assignees = append(local.R.Assignees, foreign)
				if foreign.R == nil {
					foreign.R = &assigneeR{}
				}
				foreign.R.OfferItem = local
				break
			}
		}
	}

	return nil
}

// LoadExaminations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (offerItemL) LoadExaminations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOfferItem interface{}, mods queries.Applicator) error {
	var slice []*OfferItem
	var object *OfferItem

	if singular {
		var ok bool
		object, ok = maybeOfferItem.(*OfferItem)
		if !ok {
			object = new(OfferItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOfferItem))
			}
		}
	} else {
		s, ok := maybeOfferItem.(*[]*OfferItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOfferItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`examination`),
		qm.WhereIn(`examination.offer_item_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`examination.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examination")
	}

	var resultSlice []*Examination
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examination")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examination")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examination")
	}

	if len(examinationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Examinations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationR{}
			}
			foreign.R.OfferItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OfferItemID {
				local.R.Examinations = append(local.R.Examinations, foreign)
				if foreign.R == nil {
					foreign.R = &examinationR{}
				}
				foreign.R.OfferItem = local
				break
			}
		}
	}

	return nil
}

// LoadQuestionnaireQuestions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (offerItemL) LoadQuestionnaireQuestions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOfferItem interface{}, mods queries.Applicator) error {
	var slice []*OfferItem
	var object *OfferItem

	if singular {
		var ok bool
		object, ok = maybeOfferItem.(*OfferItem)
		if !ok {
			object = new(OfferItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOfferItem))
			}
		}
	} else {
		s, ok := maybeOfferItem.(*[]*OfferItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOfferItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`questionnaire_question`),
		qm.WhereIn(`questionnaire_question.offer_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load questionnaire_question")
	}

	var resultSlice []*QuestionnaireQuestion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice questionnaire_question")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on questionnaire_question")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for questionnaire_question")
	}

	if len(questionnaireQuestionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QuestionnaireQuestions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questionnaireQuestionR{}
			}
			foreign.R.OfferItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OfferItemID {
				local.R.QuestionnaireQuestions = append(local.R.QuestionnaireQuestions, foreign)
				if foreign.R == nil {
					foreign.R = &questionnaireQuestionR{}
				}
				foreign.R.OfferItem = local
				break
			}
		}
	}

	return nil
}

// LoadQuestionnaireQuestionAnswers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (offerItemL) LoadQuestionnaireQuestionAnswers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOfferItem interface{}, mods queries.Applicator) error {
	var slice []*OfferItem
	var object *OfferItem

	if singular {
		var ok bool
		object, ok = maybeOfferItem.(*OfferItem)
		if !ok {
			object = new(OfferItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOfferItem))
			}
		}
	} else {
		s, ok := maybeOfferItem.(*[]*OfferItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOfferItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`questionnaire_question_answer`),
		qm.WhereIn(`questionnaire_question_answer.offer_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load questionnaire_question_answer")
	}

	var resultSlice []*QuestionnaireQuestionAnswer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice questionnaire_question_answer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on questionnaire_question_answer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for questionnaire_question_answer")
	}

	if len(questionnaireQuestionAnswerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QuestionnaireQuestionAnswers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questionnaireQuestionAnswerR{}
			}
			foreign.R.OfferItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OfferItemID {
				local.R.QuestionnaireQuestionAnswers = append(local.R.QuestionnaireQuestionAnswers, foreign)
				if foreign.R == nil {
					foreign.R = &questionnaireQuestionAnswerR{}
				}
				foreign.R.OfferItem = local
				break
			}
		}
	}

	return nil
}

// LoadSchedules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (offerItemL) LoadSchedules(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOfferItem interface{}, mods queries.Applicator) error {
	var slice []*OfferItem
	var object *OfferItem

	if singular {
		var ok bool
		object, ok = maybeOfferItem.(*OfferItem)
		if !ok {
			object = new(OfferItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOfferItem))
			}
		}
	} else {
		s, ok := maybeOfferItem.(*[]*OfferItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOfferItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOfferItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &offerItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &offerItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`schedule`),
		qm.WhereIn(`schedule.offer_item_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`schedule.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load schedule")
	}

	var resultSlice []*Schedule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice schedule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on schedule")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for schedule")
	}

	if len(scheduleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Schedules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &scheduleR{}
			}
			foreign.R.OfferItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OfferItemID {
				local.R.Schedules = append(local.R.Schedules, foreign)
				if foreign.R == nil {
					foreign.R = &scheduleR{}
				}
				foreign.R.OfferItem = local
				break
			}
		}
	}

	return nil
}

// SetDraftedItemInfo of the offerItem to the related item.
// Sets o.R.DraftedItemInfo to related.
// Adds o to related.R.OfferItem.
func (o *OfferItem) SetDraftedItemInfo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DraftedItemInfo) error {
	var err error

	if insert {
		related.OfferItemID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `drafted_item_info` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
			strmangle.WhereClause("`", "`", 0, draftedItemInfoPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.OfferItemID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OfferItemID = o.ID
	}

	if o.R == nil {
		o.R = &offerItemR{
			DraftedItemInfo: related,
		}
	} else {
		o.R.DraftedItemInfo = related
	}

	if related.R == nil {
		related.R = &draftedItemInfoR{
			OfferItem: o,
		}
	} else {
		related.R.OfferItem = o
	}
	return nil
}

// SetQuestionnaire of the offerItem to the related item.
// Sets o.R.Questionnaire to related.
// Adds o to related.R.OfferItem.
func (o *OfferItem) SetQuestionnaire(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Questionnaire) error {
	var err error

	if insert {
		related.OfferItemID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `questionnaire` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
			strmangle.WhereClause("`", "`", 0, questionnairePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.OfferItemID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.OfferItemID = o.ID
	}

	if o.R == nil {
		o.R = &offerItemR{
			Questionnaire: related,
		}
	} else {
		o.R.Questionnaire = related
	}

	if related.R == nil {
		related.R = &questionnaireR{
			OfferItem: o,
		}
	} else {
		related.R.OfferItem = o
	}
	return nil
}

// AddAssignees adds the given related objects to the existing relationships
// of the offer_item, optionally inserting them as new records.
// Appends related to o.R.Assignees.
// Sets related.R.OfferItem appropriately.
func (o *OfferItem) AddAssignees(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assignee) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OfferItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `assignee` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
				strmangle.WhereClause("`", "`", 0, assigneePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OfferItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &offerItemR{
			Assignees: related,
		}
	} else {
		o.R.Assignees = append(o.R.Assignees, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assigneeR{
				OfferItem: o,
			}
		} else {
			rel.R.OfferItem = o
		}
	}
	return nil
}

// AddExaminations adds the given related objects to the existing relationships
// of the offer_item, optionally inserting them as new records.
// Appends related to o.R.Examinations.
// Sets related.R.OfferItem appropriately.
func (o *OfferItem) AddExaminations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Examination) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OfferItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `examination` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
				strmangle.WhereClause("`", "`", 0, examinationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OfferItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &offerItemR{
			Examinations: related,
		}
	} else {
		o.R.Examinations = append(o.R.Examinations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationR{
				OfferItem: o,
			}
		} else {
			rel.R.OfferItem = o
		}
	}
	return nil
}

// AddQuestionnaireQuestions adds the given related objects to the existing relationships
// of the offer_item, optionally inserting them as new records.
// Appends related to o.R.QuestionnaireQuestions.
// Sets related.R.OfferItem appropriately.
func (o *OfferItem) AddQuestionnaireQuestions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QuestionnaireQuestion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OfferItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `questionnaire_question` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
				strmangle.WhereClause("`", "`", 0, questionnaireQuestionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OfferItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &offerItemR{
			QuestionnaireQuestions: related,
		}
	} else {
		o.R.QuestionnaireQuestions = append(o.R.QuestionnaireQuestions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questionnaireQuestionR{
				OfferItem: o,
			}
		} else {
			rel.R.OfferItem = o
		}
	}
	return nil
}

// AddQuestionnaireQuestionAnswers adds the given related objects to the existing relationships
// of the offer_item, optionally inserting them as new records.
// Appends related to o.R.QuestionnaireQuestionAnswers.
// Sets related.R.OfferItem appropriately.
func (o *OfferItem) AddQuestionnaireQuestionAnswers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*QuestionnaireQuestionAnswer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OfferItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `questionnaire_question_answer` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
				strmangle.WhereClause("`", "`", 0, questionnaireQuestionAnswerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.AssigneeID, rel.QuestionnaireQuestionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OfferItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &offerItemR{
			QuestionnaireQuestionAnswers: related,
		}
	} else {
		o.R.QuestionnaireQuestionAnswers = append(o.R.QuestionnaireQuestionAnswers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questionnaireQuestionAnswerR{
				OfferItem: o,
			}
		} else {
			rel.R.OfferItem = o
		}
	}
	return nil
}

// AddSchedules adds the given related objects to the existing relationships
// of the offer_item, optionally inserting them as new records.
// Appends related to o.R.Schedules.
// Sets related.R.OfferItem appropriately.
func (o *OfferItem) AddSchedules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Schedule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OfferItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `schedule` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
				strmangle.WhereClause("`", "`", 0, schedulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OfferItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &offerItemR{
			Schedules: related,
		}
	} else {
		o.R.Schedules = append(o.R.Schedules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &scheduleR{
				OfferItem: o,
			}
		} else {
			rel.R.OfferItem = o
		}
	}
	return nil
}

// OfferItems retrieves all the records using an executor.
func OfferItems(mods ...qm.QueryMod) offerItemQuery {
	mods = append(mods, qm.From("`offer_item`"), qmhelper.WhereIsNull("`offer_item`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`offer_item`.*"})
	}

	return offerItemQuery{q}
}

// FindOfferItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOfferItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OfferItem, error) {
	offerItemObj := &OfferItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `offer_item` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, offerItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from offer_item")
	}

	if err = offerItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return offerItemObj, err
	}

	return offerItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OfferItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no offer_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(offerItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	offerItemInsertCacheMut.RLock()
	cache, cached := offerItemInsertCache[key]
	offerItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			offerItemAllColumns,
			offerItemColumnsWithDefault,
			offerItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(offerItemType, offerItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(offerItemType, offerItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `offer_item` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `offer_item` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `offer_item` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, offerItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into offer_item")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for offer_item")
	}

CacheNoHooks:
	if !cached {
		offerItemInsertCacheMut.Lock()
		offerItemInsertCache[key] = cache
		offerItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OfferItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OfferItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	offerItemUpdateCacheMut.RLock()
	cache, cached := offerItemUpdateCache[key]
	offerItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			offerItemAllColumns,
			offerItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update offer_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `offer_item` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, offerItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(offerItemType, offerItemMapping, append(wl, offerItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update offer_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for offer_item")
	}

	if !cached {
		offerItemUpdateCacheMut.Lock()
		offerItemUpdateCache[key] = cache
		offerItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q offerItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for offer_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for offer_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OfferItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `offer_item` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, offerItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in offerItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all offerItem")
	}
	return rowsAff, nil
}

var mySQLOfferItemUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OfferItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no offer_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(offerItemColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOfferItemUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	offerItemUpsertCacheMut.RLock()
	cache, cached := offerItemUpsertCache[key]
	offerItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			offerItemAllColumns,
			offerItemColumnsWithDefault,
			offerItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			offerItemAllColumns,
			offerItemPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entity: unable to upsert offer_item, could not build update column list")
		}

		ret := strmangle.SetComplement(offerItemAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`offer_item`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `offer_item` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(offerItemType, offerItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(offerItemType, offerItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for offer_item")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(offerItemType, offerItemMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for offer_item")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for offer_item")
	}

CacheNoHooks:
	if !cached {
		offerItemUpsertCacheMut.Lock()
		offerItemUpsertCache[key] = cache
		offerItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OfferItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OfferItem) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no OfferItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), offerItemPrimaryKeyMapping)
		sql = "DELETE FROM `offer_item` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `offer_item` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(offerItemType, offerItemMapping, append(wl, offerItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from offer_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for offer_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q offerItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no offerItemQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from offer_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for offer_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OfferItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(offerItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerItemPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `offer_item` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, offerItemPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerItemPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `offer_item` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, offerItemPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from offerItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for offer_item")
	}

	if len(offerItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OfferItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOfferItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OfferItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OfferItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), offerItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `offer_item`.* FROM `offer_item` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, offerItemPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in OfferItemSlice")
	}

	*o = slice

	return nil
}

// OfferItemExists checks if the OfferItem row exists.
func OfferItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `offer_item` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if offer_item exists")
	}

	return exists, nil
}

// Exists checks if the OfferItem row exists.
func (o *OfferItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OfferItemExists(ctx, exec, o.ID)
}
