// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Schedule is an object representing the database table.
type Schedule struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	OfferItemID  string    `boil:"offer_item_id" json:"offer_item_id" toml:"offer_item_id" yaml:"offer_item_id"`
	ScheduleType uint      `boil:"schedule_type" json:"schedule_type" toml:"schedule_type" yaml:"schedule_type"`
	StartDate    null.Time `boil:"start_date" json:"start_date,omitempty" toml:"start_date" yaml:"start_date,omitempty"`
	EndDate      null.Time `boil:"end_date" json:"end_date,omitempty" toml:"end_date" yaml:"end_date,omitempty"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy    string    `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy    string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *scheduleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scheduleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScheduleColumns = struct {
	ID           string
	OfferItemID  string
	ScheduleType string
	StartDate    string
	EndDate      string
	CreatedAt    string
	CreatedBy    string
	UpdatedAt    string
	UpdatedBy    string
	DeletedAt    string
}{
	ID:           "id",
	OfferItemID:  "offer_item_id",
	ScheduleType: "schedule_type",
	StartDate:    "start_date",
	EndDate:      "end_date",
	CreatedAt:    "created_at",
	CreatedBy:    "created_by",
	UpdatedAt:    "updated_at",
	UpdatedBy:    "updated_by",
	DeletedAt:    "deleted_at",
}

var ScheduleTableColumns = struct {
	ID           string
	OfferItemID  string
	ScheduleType string
	StartDate    string
	EndDate      string
	CreatedAt    string
	CreatedBy    string
	UpdatedAt    string
	UpdatedBy    string
	DeletedAt    string
}{
	ID:           "schedule.id",
	OfferItemID:  "schedule.offer_item_id",
	ScheduleType: "schedule.schedule_type",
	StartDate:    "schedule.start_date",
	EndDate:      "schedule.end_date",
	CreatedAt:    "schedule.created_at",
	CreatedBy:    "schedule.created_by",
	UpdatedAt:    "schedule.updated_at",
	UpdatedBy:    "schedule.updated_by",
	DeletedAt:    "schedule.deleted_at",
}

// Generated where

var ScheduleWhere = struct {
	ID           whereHelperstring
	OfferItemID  whereHelperstring
	ScheduleType whereHelperuint
	StartDate    whereHelpernull_Time
	EndDate      whereHelpernull_Time
	CreatedAt    whereHelpertime_Time
	CreatedBy    whereHelperstring
	UpdatedAt    whereHelpertime_Time
	UpdatedBy    whereHelperstring
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperstring{field: "`schedule`.`id`"},
	OfferItemID:  whereHelperstring{field: "`schedule`.`offer_item_id`"},
	ScheduleType: whereHelperuint{field: "`schedule`.`schedule_type`"},
	StartDate:    whereHelpernull_Time{field: "`schedule`.`start_date`"},
	EndDate:      whereHelpernull_Time{field: "`schedule`.`end_date`"},
	CreatedAt:    whereHelpertime_Time{field: "`schedule`.`created_at`"},
	CreatedBy:    whereHelperstring{field: "`schedule`.`created_by`"},
	UpdatedAt:    whereHelpertime_Time{field: "`schedule`.`updated_at`"},
	UpdatedBy:    whereHelperstring{field: "`schedule`.`updated_by`"},
	DeletedAt:    whereHelpernull_Time{field: "`schedule`.`deleted_at`"},
}

// ScheduleRels is where relationship names are stored.
var ScheduleRels = struct {
	OfferItem string
}{
	OfferItem: "OfferItem",
}

// scheduleR is where relationships are stored.
type scheduleR struct {
	OfferItem *OfferItem `boil:"OfferItem" json:"OfferItem" toml:"OfferItem" yaml:"OfferItem"`
}

// NewStruct creates a new relationship struct
func (*scheduleR) NewStruct() *scheduleR {
	return &scheduleR{}
}

func (r *scheduleR) GetOfferItem() *OfferItem {
	if r == nil {
		return nil
	}
	return r.OfferItem
}

// scheduleL is where Load methods for each relationship are stored.
type scheduleL struct{}

var (
	scheduleAllColumns            = []string{"id", "offer_item_id", "schedule_type", "start_date", "end_date", "created_at", "created_by", "updated_at", "updated_by", "deleted_at"}
	scheduleColumnsWithoutDefault = []string{"id", "offer_item_id", "schedule_type", "start_date", "end_date", "created_at", "created_by", "updated_at", "updated_by", "deleted_at"}
	scheduleColumnsWithDefault    = []string{}
	schedulePrimaryKeyColumns     = []string{"id"}
	scheduleGeneratedColumns      = []string{}
)

type (
	// ScheduleSlice is an alias for a slice of pointers to Schedule.
	// This should almost always be used instead of []Schedule.
	ScheduleSlice []*Schedule
	// ScheduleHook is the signature for custom Schedule hook methods
	ScheduleHook func(context.Context, boil.ContextExecutor, *Schedule) error

	scheduleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scheduleType                 = reflect.TypeOf(&Schedule{})
	scheduleMapping              = queries.MakeStructMapping(scheduleType)
	schedulePrimaryKeyMapping, _ = queries.BindMapping(scheduleType, scheduleMapping, schedulePrimaryKeyColumns)
	scheduleInsertCacheMut       sync.RWMutex
	scheduleInsertCache          = make(map[string]insertCache)
	scheduleUpdateCacheMut       sync.RWMutex
	scheduleUpdateCache          = make(map[string]updateCache)
	scheduleUpsertCacheMut       sync.RWMutex
	scheduleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var scheduleAfterSelectMu sync.Mutex
var scheduleAfterSelectHooks []ScheduleHook

var scheduleBeforeInsertMu sync.Mutex
var scheduleBeforeInsertHooks []ScheduleHook
var scheduleAfterInsertMu sync.Mutex
var scheduleAfterInsertHooks []ScheduleHook

var scheduleBeforeUpdateMu sync.Mutex
var scheduleBeforeUpdateHooks []ScheduleHook
var scheduleAfterUpdateMu sync.Mutex
var scheduleAfterUpdateHooks []ScheduleHook

var scheduleBeforeDeleteMu sync.Mutex
var scheduleBeforeDeleteHooks []ScheduleHook
var scheduleAfterDeleteMu sync.Mutex
var scheduleAfterDeleteHooks []ScheduleHook

var scheduleBeforeUpsertMu sync.Mutex
var scheduleBeforeUpsertHooks []ScheduleHook
var scheduleAfterUpsertMu sync.Mutex
var scheduleAfterUpsertHooks []ScheduleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Schedule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Schedule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Schedule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Schedule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Schedule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Schedule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Schedule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Schedule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Schedule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddScheduleHook registers your hook function for all future operations.
func AddScheduleHook(hookPoint boil.HookPoint, scheduleHook ScheduleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		scheduleAfterSelectMu.Lock()
		scheduleAfterSelectHooks = append(scheduleAfterSelectHooks, scheduleHook)
		scheduleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		scheduleBeforeInsertMu.Lock()
		scheduleBeforeInsertHooks = append(scheduleBeforeInsertHooks, scheduleHook)
		scheduleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		scheduleAfterInsertMu.Lock()
		scheduleAfterInsertHooks = append(scheduleAfterInsertHooks, scheduleHook)
		scheduleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		scheduleBeforeUpdateMu.Lock()
		scheduleBeforeUpdateHooks = append(scheduleBeforeUpdateHooks, scheduleHook)
		scheduleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		scheduleAfterUpdateMu.Lock()
		scheduleAfterUpdateHooks = append(scheduleAfterUpdateHooks, scheduleHook)
		scheduleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		scheduleBeforeDeleteMu.Lock()
		scheduleBeforeDeleteHooks = append(scheduleBeforeDeleteHooks, scheduleHook)
		scheduleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		scheduleAfterDeleteMu.Lock()
		scheduleAfterDeleteHooks = append(scheduleAfterDeleteHooks, scheduleHook)
		scheduleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		scheduleBeforeUpsertMu.Lock()
		scheduleBeforeUpsertHooks = append(scheduleBeforeUpsertHooks, scheduleHook)
		scheduleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		scheduleAfterUpsertMu.Lock()
		scheduleAfterUpsertHooks = append(scheduleAfterUpsertHooks, scheduleHook)
		scheduleAfterUpsertMu.Unlock()
	}
}

// One returns a single schedule record from the query.
func (q scheduleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Schedule, error) {
	o := &Schedule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for schedule")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Schedule records from the query.
func (q scheduleQuery) All(ctx context.Context, exec boil.ContextExecutor) (ScheduleSlice, error) {
	var o []*Schedule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Schedule slice")
	}

	if len(scheduleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Schedule records in the query.
func (q scheduleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count schedule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q scheduleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if schedule exists")
	}

	return count > 0, nil
}

// OfferItem pointed to by the foreign key.
func (o *Schedule) OfferItem(mods ...qm.QueryMod) offerItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OfferItemID),
	}

	queryMods = append(queryMods, mods...)

	return OfferItems(queryMods...)
}

// LoadOfferItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scheduleL) LoadOfferItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSchedule interface{}, mods queries.Applicator) error {
	var slice []*Schedule
	var object *Schedule

	if singular {
		var ok bool
		object, ok = maybeSchedule.(*Schedule)
		if !ok {
			object = new(Schedule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSchedule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSchedule))
			}
		}
	} else {
		s, ok := maybeSchedule.(*[]*Schedule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSchedule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSchedule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &scheduleR{}
		}
		args[object.OfferItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduleR{}
			}

			args[obj.OfferItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`offer_item`),
		qm.WhereIn(`offer_item.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`offer_item.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OfferItem")
	}

	var resultSlice []*OfferItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OfferItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for offer_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offer_item")
	}

	if len(offerItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OfferItem = foreign
		if foreign.R == nil {
			foreign.R = &offerItemR{}
		}
		foreign.R.Schedules = append(foreign.R.Schedules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfferItemID == foreign.ID {
				local.R.OfferItem = foreign
				if foreign.R == nil {
					foreign.R = &offerItemR{}
				}
				foreign.R.Schedules = append(foreign.R.Schedules, local)
				break
			}
		}
	}

	return nil
}

// SetOfferItem of the schedule to the related item.
// Sets o.R.OfferItem to related.
// Adds o to related.R.Schedules.
func (o *Schedule) SetOfferItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OfferItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `schedule` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
		strmangle.WhereClause("`", "`", 0, schedulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfferItemID = related.ID
	if o.R == nil {
		o.R = &scheduleR{
			OfferItem: related,
		}
	} else {
		o.R.OfferItem = related
	}

	if related.R == nil {
		related.R = &offerItemR{
			Schedules: ScheduleSlice{o},
		}
	} else {
		related.R.Schedules = append(related.R.Schedules, o)
	}

	return nil
}

// Schedules retrieves all the records using an executor.
func Schedules(mods ...qm.QueryMod) scheduleQuery {
	mods = append(mods, qm.From("`schedule`"), qmhelper.WhereIsNull("`schedule`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`schedule`.*"})
	}

	return scheduleQuery{q}
}

// FindSchedule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSchedule(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Schedule, error) {
	scheduleObj := &Schedule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `schedule` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, scheduleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from schedule")
	}

	if err = scheduleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return scheduleObj, err
	}

	return scheduleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Schedule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no schedule provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	scheduleInsertCacheMut.RLock()
	cache, cached := scheduleInsertCache[key]
	scheduleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			scheduleAllColumns,
			scheduleColumnsWithDefault,
			scheduleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(scheduleType, scheduleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scheduleType, scheduleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `schedule` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `schedule` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `schedule` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, schedulePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into schedule")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for schedule")
	}

CacheNoHooks:
	if !cached {
		scheduleInsertCacheMut.Lock()
		scheduleInsertCache[key] = cache
		scheduleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Schedule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Schedule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	scheduleUpdateCacheMut.RLock()
	cache, cached := scheduleUpdateCache[key]
	scheduleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			scheduleAllColumns,
			schedulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update schedule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `schedule` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, schedulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scheduleType, scheduleMapping, append(wl, schedulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update schedule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for schedule")
	}

	if !cached {
		scheduleUpdateCacheMut.Lock()
		scheduleUpdateCache[key] = cache
		scheduleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q scheduleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for schedule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScheduleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `schedule` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in schedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all schedule")
	}
	return rowsAff, nil
}

var mySQLScheduleUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Schedule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no schedule provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLScheduleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scheduleUpsertCacheMut.RLock()
	cache, cached := scheduleUpsertCache[key]
	scheduleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			scheduleAllColumns,
			scheduleColumnsWithDefault,
			scheduleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			scheduleAllColumns,
			schedulePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entity: unable to upsert schedule, could not build update column list")
		}

		ret := strmangle.SetComplement(scheduleAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`schedule`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `schedule` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(scheduleType, scheduleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scheduleType, scheduleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for schedule")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(scheduleType, scheduleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for schedule")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for schedule")
	}

CacheNoHooks:
	if !cached {
		scheduleUpsertCacheMut.Lock()
		scheduleUpsertCache[key] = cache
		scheduleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Schedule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Schedule) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Schedule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), schedulePrimaryKeyMapping)
		sql = "DELETE FROM `schedule` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `schedule` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(scheduleType, scheduleMapping, append(wl, schedulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for schedule")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q scheduleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no scheduleQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for schedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScheduleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(scheduleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `schedule` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `schedule` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from schedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for schedule")
	}

	if len(scheduleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Schedule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSchedule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScheduleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScheduleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `schedule`.* FROM `schedule` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulePrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in ScheduleSlice")
	}

	*o = slice

	return nil
}

// ScheduleExists checks if the Schedule row exists.
func ScheduleExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `schedule` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if schedule exists")
	}

	return exists, nil
}

// Exists checks if the Schedule row exists.
func (o *Schedule) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ScheduleExists(ctx, exec, o.ID)
}
