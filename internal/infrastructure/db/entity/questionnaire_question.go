// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// QuestionnaireQuestion is an object representing the database table.
type QuestionnaireQuestion struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	OfferItemID   string    `boil:"offer_item_id" json:"offer_item_id" toml:"offer_item_id" yaml:"offer_item_id"`
	Title         string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Type          int       `boil:"type" json:"type" toml:"type" yaml:"type"`
	Image         string    `boil:"image" json:"image" toml:"image" yaml:"image"`
	AnswerOptions null.JSON `boil:"answer_options" json:"answer_options,omitempty" toml:"answer_options" yaml:"answer_options,omitempty"`
	Priority      int       `boil:"priority" json:"priority" toml:"priority" yaml:"priority"`

	R *questionnaireQuestionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L questionnaireQuestionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QuestionnaireQuestionColumns = struct {
	ID            string
	OfferItemID   string
	Title         string
	Type          string
	Image         string
	AnswerOptions string
	Priority      string
}{
	ID:            "id",
	OfferItemID:   "offer_item_id",
	Title:         "title",
	Type:          "type",
	Image:         "image",
	AnswerOptions: "answer_options",
	Priority:      "priority",
}

var QuestionnaireQuestionTableColumns = struct {
	ID            string
	OfferItemID   string
	Title         string
	Type          string
	Image         string
	AnswerOptions string
	Priority      string
}{
	ID:            "questionnaire_question.id",
	OfferItemID:   "questionnaire_question.offer_item_id",
	Title:         "questionnaire_question.title",
	Type:          "questionnaire_question.type",
	Image:         "questionnaire_question.image",
	AnswerOptions: "questionnaire_question.answer_options",
	Priority:      "questionnaire_question.priority",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var QuestionnaireQuestionWhere = struct {
	ID            whereHelperstring
	OfferItemID   whereHelperstring
	Title         whereHelperstring
	Type          whereHelperint
	Image         whereHelperstring
	AnswerOptions whereHelpernull_JSON
	Priority      whereHelperint
}{
	ID:            whereHelperstring{field: "`questionnaire_question`.`id`"},
	OfferItemID:   whereHelperstring{field: "`questionnaire_question`.`offer_item_id`"},
	Title:         whereHelperstring{field: "`questionnaire_question`.`title`"},
	Type:          whereHelperint{field: "`questionnaire_question`.`type`"},
	Image:         whereHelperstring{field: "`questionnaire_question`.`image`"},
	AnswerOptions: whereHelpernull_JSON{field: "`questionnaire_question`.`answer_options`"},
	Priority:      whereHelperint{field: "`questionnaire_question`.`priority`"},
}

// QuestionnaireQuestionRels is where relationship names are stored.
var QuestionnaireQuestionRels = struct {
	OfferItem string
}{
	OfferItem: "OfferItem",
}

// questionnaireQuestionR is where relationships are stored.
type questionnaireQuestionR struct {
	OfferItem *OfferItem `boil:"OfferItem" json:"OfferItem" toml:"OfferItem" yaml:"OfferItem"`
}

// NewStruct creates a new relationship struct
func (*questionnaireQuestionR) NewStruct() *questionnaireQuestionR {
	return &questionnaireQuestionR{}
}

func (r *questionnaireQuestionR) GetOfferItem() *OfferItem {
	if r == nil {
		return nil
	}
	return r.OfferItem
}

// questionnaireQuestionL is where Load methods for each relationship are stored.
type questionnaireQuestionL struct{}

var (
	questionnaireQuestionAllColumns            = []string{"id", "offer_item_id", "title", "type", "image", "answer_options", "priority"}
	questionnaireQuestionColumnsWithoutDefault = []string{"id", "offer_item_id", "title", "type", "image", "answer_options", "priority"}
	questionnaireQuestionColumnsWithDefault    = []string{}
	questionnaireQuestionPrimaryKeyColumns     = []string{"id"}
	questionnaireQuestionGeneratedColumns      = []string{}
)

type (
	// QuestionnaireQuestionSlice is an alias for a slice of pointers to QuestionnaireQuestion.
	// This should almost always be used instead of []QuestionnaireQuestion.
	QuestionnaireQuestionSlice []*QuestionnaireQuestion
	// QuestionnaireQuestionHook is the signature for custom QuestionnaireQuestion hook methods
	QuestionnaireQuestionHook func(context.Context, boil.ContextExecutor, *QuestionnaireQuestion) error

	questionnaireQuestionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	questionnaireQuestionType                 = reflect.TypeOf(&QuestionnaireQuestion{})
	questionnaireQuestionMapping              = queries.MakeStructMapping(questionnaireQuestionType)
	questionnaireQuestionPrimaryKeyMapping, _ = queries.BindMapping(questionnaireQuestionType, questionnaireQuestionMapping, questionnaireQuestionPrimaryKeyColumns)
	questionnaireQuestionInsertCacheMut       sync.RWMutex
	questionnaireQuestionInsertCache          = make(map[string]insertCache)
	questionnaireQuestionUpdateCacheMut       sync.RWMutex
	questionnaireQuestionUpdateCache          = make(map[string]updateCache)
	questionnaireQuestionUpsertCacheMut       sync.RWMutex
	questionnaireQuestionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var questionnaireQuestionAfterSelectMu sync.Mutex
var questionnaireQuestionAfterSelectHooks []QuestionnaireQuestionHook

var questionnaireQuestionBeforeInsertMu sync.Mutex
var questionnaireQuestionBeforeInsertHooks []QuestionnaireQuestionHook
var questionnaireQuestionAfterInsertMu sync.Mutex
var questionnaireQuestionAfterInsertHooks []QuestionnaireQuestionHook

var questionnaireQuestionBeforeUpdateMu sync.Mutex
var questionnaireQuestionBeforeUpdateHooks []QuestionnaireQuestionHook
var questionnaireQuestionAfterUpdateMu sync.Mutex
var questionnaireQuestionAfterUpdateHooks []QuestionnaireQuestionHook

var questionnaireQuestionBeforeDeleteMu sync.Mutex
var questionnaireQuestionBeforeDeleteHooks []QuestionnaireQuestionHook
var questionnaireQuestionAfterDeleteMu sync.Mutex
var questionnaireQuestionAfterDeleteHooks []QuestionnaireQuestionHook

var questionnaireQuestionBeforeUpsertMu sync.Mutex
var questionnaireQuestionBeforeUpsertHooks []QuestionnaireQuestionHook
var questionnaireQuestionAfterUpsertMu sync.Mutex
var questionnaireQuestionAfterUpsertHooks []QuestionnaireQuestionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *QuestionnaireQuestion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *QuestionnaireQuestion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *QuestionnaireQuestion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *QuestionnaireQuestion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *QuestionnaireQuestion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *QuestionnaireQuestion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *QuestionnaireQuestion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *QuestionnaireQuestion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *QuestionnaireQuestion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range questionnaireQuestionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQuestionnaireQuestionHook registers your hook function for all future operations.
func AddQuestionnaireQuestionHook(hookPoint boil.HookPoint, questionnaireQuestionHook QuestionnaireQuestionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		questionnaireQuestionAfterSelectMu.Lock()
		questionnaireQuestionAfterSelectHooks = append(questionnaireQuestionAfterSelectHooks, questionnaireQuestionHook)
		questionnaireQuestionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		questionnaireQuestionBeforeInsertMu.Lock()
		questionnaireQuestionBeforeInsertHooks = append(questionnaireQuestionBeforeInsertHooks, questionnaireQuestionHook)
		questionnaireQuestionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		questionnaireQuestionAfterInsertMu.Lock()
		questionnaireQuestionAfterInsertHooks = append(questionnaireQuestionAfterInsertHooks, questionnaireQuestionHook)
		questionnaireQuestionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		questionnaireQuestionBeforeUpdateMu.Lock()
		questionnaireQuestionBeforeUpdateHooks = append(questionnaireQuestionBeforeUpdateHooks, questionnaireQuestionHook)
		questionnaireQuestionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		questionnaireQuestionAfterUpdateMu.Lock()
		questionnaireQuestionAfterUpdateHooks = append(questionnaireQuestionAfterUpdateHooks, questionnaireQuestionHook)
		questionnaireQuestionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		questionnaireQuestionBeforeDeleteMu.Lock()
		questionnaireQuestionBeforeDeleteHooks = append(questionnaireQuestionBeforeDeleteHooks, questionnaireQuestionHook)
		questionnaireQuestionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		questionnaireQuestionAfterDeleteMu.Lock()
		questionnaireQuestionAfterDeleteHooks = append(questionnaireQuestionAfterDeleteHooks, questionnaireQuestionHook)
		questionnaireQuestionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		questionnaireQuestionBeforeUpsertMu.Lock()
		questionnaireQuestionBeforeUpsertHooks = append(questionnaireQuestionBeforeUpsertHooks, questionnaireQuestionHook)
		questionnaireQuestionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		questionnaireQuestionAfterUpsertMu.Lock()
		questionnaireQuestionAfterUpsertHooks = append(questionnaireQuestionAfterUpsertHooks, questionnaireQuestionHook)
		questionnaireQuestionAfterUpsertMu.Unlock()
	}
}

// One returns a single questionnaireQuestion record from the query.
func (q questionnaireQuestionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*QuestionnaireQuestion, error) {
	o := &QuestionnaireQuestion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for questionnaire_question")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all QuestionnaireQuestion records from the query.
func (q questionnaireQuestionQuery) All(ctx context.Context, exec boil.ContextExecutor) (QuestionnaireQuestionSlice, error) {
	var o []*QuestionnaireQuestion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to QuestionnaireQuestion slice")
	}

	if len(questionnaireQuestionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all QuestionnaireQuestion records in the query.
func (q questionnaireQuestionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count questionnaire_question rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q questionnaireQuestionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if questionnaire_question exists")
	}

	return count > 0, nil
}

// OfferItem pointed to by the foreign key.
func (o *QuestionnaireQuestion) OfferItem(mods ...qm.QueryMod) offerItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OfferItemID),
	}

	queryMods = append(queryMods, mods...)

	return OfferItems(queryMods...)
}

// LoadOfferItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (questionnaireQuestionL) LoadOfferItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeQuestionnaireQuestion interface{}, mods queries.Applicator) error {
	var slice []*QuestionnaireQuestion
	var object *QuestionnaireQuestion

	if singular {
		var ok bool
		object, ok = maybeQuestionnaireQuestion.(*QuestionnaireQuestion)
		if !ok {
			object = new(QuestionnaireQuestion)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeQuestionnaireQuestion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeQuestionnaireQuestion))
			}
		}
	} else {
		s, ok := maybeQuestionnaireQuestion.(*[]*QuestionnaireQuestion)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeQuestionnaireQuestion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeQuestionnaireQuestion))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &questionnaireQuestionR{}
		}
		args[object.OfferItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questionnaireQuestionR{}
			}

			args[obj.OfferItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`offer_item`),
		qm.WhereIn(`offer_item.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`offer_item.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OfferItem")
	}

	var resultSlice []*OfferItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OfferItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for offer_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offer_item")
	}

	if len(offerItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OfferItem = foreign
		if foreign.R == nil {
			foreign.R = &offerItemR{}
		}
		foreign.R.QuestionnaireQuestions = append(foreign.R.QuestionnaireQuestions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfferItemID == foreign.ID {
				local.R.OfferItem = foreign
				if foreign.R == nil {
					foreign.R = &offerItemR{}
				}
				foreign.R.QuestionnaireQuestions = append(foreign.R.QuestionnaireQuestions, local)
				break
			}
		}
	}

	return nil
}

// SetOfferItem of the questionnaireQuestion to the related item.
// Sets o.R.OfferItem to related.
// Adds o to related.R.QuestionnaireQuestions.
func (o *QuestionnaireQuestion) SetOfferItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OfferItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `questionnaire_question` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
		strmangle.WhereClause("`", "`", 0, questionnaireQuestionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfferItemID = related.ID
	if o.R == nil {
		o.R = &questionnaireQuestionR{
			OfferItem: related,
		}
	} else {
		o.R.OfferItem = related
	}

	if related.R == nil {
		related.R = &offerItemR{
			QuestionnaireQuestions: QuestionnaireQuestionSlice{o},
		}
	} else {
		related.R.QuestionnaireQuestions = append(related.R.QuestionnaireQuestions, o)
	}

	return nil
}

// QuestionnaireQuestions retrieves all the records using an executor.
func QuestionnaireQuestions(mods ...qm.QueryMod) questionnaireQuestionQuery {
	mods = append(mods, qm.From("`questionnaire_question`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`questionnaire_question`.*"})
	}

	return questionnaireQuestionQuery{q}
}

// FindQuestionnaireQuestion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQuestionnaireQuestion(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*QuestionnaireQuestion, error) {
	questionnaireQuestionObj := &QuestionnaireQuestion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `questionnaire_question` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, questionnaireQuestionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from questionnaire_question")
	}

	if err = questionnaireQuestionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return questionnaireQuestionObj, err
	}

	return questionnaireQuestionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *QuestionnaireQuestion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no questionnaire_question provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questionnaireQuestionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	questionnaireQuestionInsertCacheMut.RLock()
	cache, cached := questionnaireQuestionInsertCache[key]
	questionnaireQuestionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			questionnaireQuestionAllColumns,
			questionnaireQuestionColumnsWithDefault,
			questionnaireQuestionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(questionnaireQuestionType, questionnaireQuestionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(questionnaireQuestionType, questionnaireQuestionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `questionnaire_question` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `questionnaire_question` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `questionnaire_question` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, questionnaireQuestionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into questionnaire_question")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for questionnaire_question")
	}

CacheNoHooks:
	if !cached {
		questionnaireQuestionInsertCacheMut.Lock()
		questionnaireQuestionInsertCache[key] = cache
		questionnaireQuestionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the QuestionnaireQuestion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *QuestionnaireQuestion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	questionnaireQuestionUpdateCacheMut.RLock()
	cache, cached := questionnaireQuestionUpdateCache[key]
	questionnaireQuestionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			questionnaireQuestionAllColumns,
			questionnaireQuestionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update questionnaire_question, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `questionnaire_question` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, questionnaireQuestionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(questionnaireQuestionType, questionnaireQuestionMapping, append(wl, questionnaireQuestionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update questionnaire_question row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for questionnaire_question")
	}

	if !cached {
		questionnaireQuestionUpdateCacheMut.Lock()
		questionnaireQuestionUpdateCache[key] = cache
		questionnaireQuestionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q questionnaireQuestionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for questionnaire_question")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for questionnaire_question")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QuestionnaireQuestionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionnaireQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `questionnaire_question` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, questionnaireQuestionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in questionnaireQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all questionnaireQuestion")
	}
	return rowsAff, nil
}

var mySQLQuestionnaireQuestionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *QuestionnaireQuestion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no questionnaire_question provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questionnaireQuestionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLQuestionnaireQuestionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	questionnaireQuestionUpsertCacheMut.RLock()
	cache, cached := questionnaireQuestionUpsertCache[key]
	questionnaireQuestionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			questionnaireQuestionAllColumns,
			questionnaireQuestionColumnsWithDefault,
			questionnaireQuestionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			questionnaireQuestionAllColumns,
			questionnaireQuestionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entity: unable to upsert questionnaire_question, could not build update column list")
		}

		ret := strmangle.SetComplement(questionnaireQuestionAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`questionnaire_question`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `questionnaire_question` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(questionnaireQuestionType, questionnaireQuestionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(questionnaireQuestionType, questionnaireQuestionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for questionnaire_question")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(questionnaireQuestionType, questionnaireQuestionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for questionnaire_question")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for questionnaire_question")
	}

CacheNoHooks:
	if !cached {
		questionnaireQuestionUpsertCacheMut.Lock()
		questionnaireQuestionUpsertCache[key] = cache
		questionnaireQuestionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single QuestionnaireQuestion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *QuestionnaireQuestion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no QuestionnaireQuestion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), questionnaireQuestionPrimaryKeyMapping)
	sql := "DELETE FROM `questionnaire_question` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from questionnaire_question")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for questionnaire_question")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q questionnaireQuestionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no questionnaireQuestionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from questionnaire_question")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for questionnaire_question")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QuestionnaireQuestionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(questionnaireQuestionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionnaireQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `questionnaire_question` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, questionnaireQuestionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from questionnaireQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for questionnaire_question")
	}

	if len(questionnaireQuestionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *QuestionnaireQuestion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindQuestionnaireQuestion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QuestionnaireQuestionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QuestionnaireQuestionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionnaireQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `questionnaire_question`.* FROM `questionnaire_question` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, questionnaireQuestionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in QuestionnaireQuestionSlice")
	}

	*o = slice

	return nil
}

// QuestionnaireQuestionExists checks if the QuestionnaireQuestion row exists.
func QuestionnaireQuestionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `questionnaire_question` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if questionnaire_question exists")
	}

	return exists, nil
}

// Exists checks if the QuestionnaireQuestion row exists.
func (o *QuestionnaireQuestion) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return QuestionnaireQuestionExists(ctx, exec, o.ID)
}
