// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Assignee is an object representing the database table.
type Assignee struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OfferItemID   string      `boil:"offer_item_id" json:"offer_item_id" toml:"offer_item_id" yaml:"offer_item_id"`
	AmebaID       string      `boil:"ameba_id" json:"ameba_id" toml:"ameba_id" yaml:"ameba_id"`
	Stage         uint        `boil:"stage" json:"stage" toml:"stage" yaml:"stage"`
	WritingFee    int         `boil:"writing_fee" json:"writing_fee" toml:"writing_fee" yaml:"writing_fee"`
	DeclineReason null.String `boil:"decline_reason" json:"decline_reason,omitempty" toml:"decline_reason" yaml:"decline_reason,omitempty"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy     string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy     string      `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	DeletedAt     null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *assigneeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assigneeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssigneeColumns = struct {
	ID            string
	OfferItemID   string
	AmebaID       string
	Stage         string
	WritingFee    string
	DeclineReason string
	CreatedAt     string
	CreatedBy     string
	UpdatedAt     string
	UpdatedBy     string
	DeletedAt     string
}{
	ID:            "id",
	OfferItemID:   "offer_item_id",
	AmebaID:       "ameba_id",
	Stage:         "stage",
	WritingFee:    "writing_fee",
	DeclineReason: "decline_reason",
	CreatedAt:     "created_at",
	CreatedBy:     "created_by",
	UpdatedAt:     "updated_at",
	UpdatedBy:     "updated_by",
	DeletedAt:     "deleted_at",
}

var AssigneeTableColumns = struct {
	ID            string
	OfferItemID   string
	AmebaID       string
	Stage         string
	WritingFee    string
	DeclineReason string
	CreatedAt     string
	CreatedBy     string
	UpdatedAt     string
	UpdatedBy     string
	DeletedAt     string
}{
	ID:            "assignee.id",
	OfferItemID:   "assignee.offer_item_id",
	AmebaID:       "assignee.ameba_id",
	Stage:         "assignee.stage",
	WritingFee:    "assignee.writing_fee",
	DeclineReason: "assignee.decline_reason",
	CreatedAt:     "assignee.created_at",
	CreatedBy:     "assignee.created_by",
	UpdatedAt:     "assignee.updated_at",
	UpdatedBy:     "assignee.updated_by",
	DeletedAt:     "assignee.deleted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AssigneeWhere = struct {
	ID            whereHelperstring
	OfferItemID   whereHelperstring
	AmebaID       whereHelperstring
	Stage         whereHelperuint
	WritingFee    whereHelperint
	DeclineReason whereHelpernull_String
	CreatedAt     whereHelpertime_Time
	CreatedBy     whereHelperstring
	UpdatedAt     whereHelpertime_Time
	UpdatedBy     whereHelperstring
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "`assignee`.`id`"},
	OfferItemID:   whereHelperstring{field: "`assignee`.`offer_item_id`"},
	AmebaID:       whereHelperstring{field: "`assignee`.`ameba_id`"},
	Stage:         whereHelperuint{field: "`assignee`.`stage`"},
	WritingFee:    whereHelperint{field: "`assignee`.`writing_fee`"},
	DeclineReason: whereHelpernull_String{field: "`assignee`.`decline_reason`"},
	CreatedAt:     whereHelpertime_Time{field: "`assignee`.`created_at`"},
	CreatedBy:     whereHelperstring{field: "`assignee`.`created_by`"},
	UpdatedAt:     whereHelpertime_Time{field: "`assignee`.`updated_at`"},
	UpdatedBy:     whereHelperstring{field: "`assignee`.`updated_by`"},
	DeletedAt:     whereHelpernull_Time{field: "`assignee`.`deleted_at`"},
}

// AssigneeRels is where relationship names are stored.
var AssigneeRels = struct {
	OfferItem    string
	AssigneeLogs string
	Examinations string
}{
	OfferItem:    "OfferItem",
	AssigneeLogs: "AssigneeLogs",
	Examinations: "Examinations",
}

// assigneeR is where relationships are stored.
type assigneeR struct {
	OfferItem    *OfferItem       `boil:"OfferItem" json:"OfferItem" toml:"OfferItem" yaml:"OfferItem"`
	AssigneeLogs AssigneeLogSlice `boil:"AssigneeLogs" json:"AssigneeLogs" toml:"AssigneeLogs" yaml:"AssigneeLogs"`
	Examinations ExaminationSlice `boil:"Examinations" json:"Examinations" toml:"Examinations" yaml:"Examinations"`
}

// NewStruct creates a new relationship struct
func (*assigneeR) NewStruct() *assigneeR {
	return &assigneeR{}
}

func (r *assigneeR) GetOfferItem() *OfferItem {
	if r == nil {
		return nil
	}
	return r.OfferItem
}

func (r *assigneeR) GetAssigneeLogs() AssigneeLogSlice {
	if r == nil {
		return nil
	}
	return r.AssigneeLogs
}

func (r *assigneeR) GetExaminations() ExaminationSlice {
	if r == nil {
		return nil
	}
	return r.Examinations
}

// assigneeL is where Load methods for each relationship are stored.
type assigneeL struct{}

var (
	assigneeAllColumns            = []string{"id", "offer_item_id", "ameba_id", "stage", "writing_fee", "decline_reason", "created_at", "created_by", "updated_at", "updated_by", "deleted_at"}
	assigneeColumnsWithoutDefault = []string{"id", "offer_item_id", "ameba_id", "stage", "writing_fee", "decline_reason", "created_at", "created_by", "updated_at", "updated_by", "deleted_at"}
	assigneeColumnsWithDefault    = []string{}
	assigneePrimaryKeyColumns     = []string{"id"}
	assigneeGeneratedColumns      = []string{}
)

type (
	// AssigneeSlice is an alias for a slice of pointers to Assignee.
	// This should almost always be used instead of []Assignee.
	AssigneeSlice []*Assignee
	// AssigneeHook is the signature for custom Assignee hook methods
	AssigneeHook func(context.Context, boil.ContextExecutor, *Assignee) error

	assigneeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assigneeType                 = reflect.TypeOf(&Assignee{})
	assigneeMapping              = queries.MakeStructMapping(assigneeType)
	assigneePrimaryKeyMapping, _ = queries.BindMapping(assigneeType, assigneeMapping, assigneePrimaryKeyColumns)
	assigneeInsertCacheMut       sync.RWMutex
	assigneeInsertCache          = make(map[string]insertCache)
	assigneeUpdateCacheMut       sync.RWMutex
	assigneeUpdateCache          = make(map[string]updateCache)
	assigneeUpsertCacheMut       sync.RWMutex
	assigneeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assigneeAfterSelectMu sync.Mutex
var assigneeAfterSelectHooks []AssigneeHook

var assigneeBeforeInsertMu sync.Mutex
var assigneeBeforeInsertHooks []AssigneeHook
var assigneeAfterInsertMu sync.Mutex
var assigneeAfterInsertHooks []AssigneeHook

var assigneeBeforeUpdateMu sync.Mutex
var assigneeBeforeUpdateHooks []AssigneeHook
var assigneeAfterUpdateMu sync.Mutex
var assigneeAfterUpdateHooks []AssigneeHook

var assigneeBeforeDeleteMu sync.Mutex
var assigneeBeforeDeleteHooks []AssigneeHook
var assigneeAfterDeleteMu sync.Mutex
var assigneeAfterDeleteHooks []AssigneeHook

var assigneeBeforeUpsertMu sync.Mutex
var assigneeBeforeUpsertHooks []AssigneeHook
var assigneeAfterUpsertMu sync.Mutex
var assigneeAfterUpsertHooks []AssigneeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Assignee) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assigneeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Assignee) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assigneeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Assignee) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assigneeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Assignee) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assigneeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Assignee) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assigneeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Assignee) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assigneeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Assignee) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assigneeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Assignee) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assigneeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Assignee) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assigneeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssigneeHook registers your hook function for all future operations.
func AddAssigneeHook(hookPoint boil.HookPoint, assigneeHook AssigneeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assigneeAfterSelectMu.Lock()
		assigneeAfterSelectHooks = append(assigneeAfterSelectHooks, assigneeHook)
		assigneeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		assigneeBeforeInsertMu.Lock()
		assigneeBeforeInsertHooks = append(assigneeBeforeInsertHooks, assigneeHook)
		assigneeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		assigneeAfterInsertMu.Lock()
		assigneeAfterInsertHooks = append(assigneeAfterInsertHooks, assigneeHook)
		assigneeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		assigneeBeforeUpdateMu.Lock()
		assigneeBeforeUpdateHooks = append(assigneeBeforeUpdateHooks, assigneeHook)
		assigneeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		assigneeAfterUpdateMu.Lock()
		assigneeAfterUpdateHooks = append(assigneeAfterUpdateHooks, assigneeHook)
		assigneeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		assigneeBeforeDeleteMu.Lock()
		assigneeBeforeDeleteHooks = append(assigneeBeforeDeleteHooks, assigneeHook)
		assigneeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		assigneeAfterDeleteMu.Lock()
		assigneeAfterDeleteHooks = append(assigneeAfterDeleteHooks, assigneeHook)
		assigneeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		assigneeBeforeUpsertMu.Lock()
		assigneeBeforeUpsertHooks = append(assigneeBeforeUpsertHooks, assigneeHook)
		assigneeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		assigneeAfterUpsertMu.Lock()
		assigneeAfterUpsertHooks = append(assigneeAfterUpsertHooks, assigneeHook)
		assigneeAfterUpsertMu.Unlock()
	}
}

// One returns a single assignee record from the query.
func (q assigneeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Assignee, error) {
	o := &Assignee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for assignee")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Assignee records from the query.
func (q assigneeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssigneeSlice, error) {
	var o []*Assignee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Assignee slice")
	}

	if len(assigneeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Assignee records in the query.
func (q assigneeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count assignee rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assigneeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if assignee exists")
	}

	return count > 0, nil
}

// OfferItem pointed to by the foreign key.
func (o *Assignee) OfferItem(mods ...qm.QueryMod) offerItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OfferItemID),
	}

	queryMods = append(queryMods, mods...)

	return OfferItems(queryMods...)
}

// AssigneeLogs retrieves all the assignee_log's AssigneeLogs with an executor.
func (o *Assignee) AssigneeLogs(mods ...qm.QueryMod) assigneeLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`assignee_log`.`assignee_id`=?", o.ID),
	)

	return AssigneeLogs(queryMods...)
}

// Examinations retrieves all the examination's Examinations with an executor.
func (o *Assignee) Examinations(mods ...qm.QueryMod) examinationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`examination`.`assignee_id`=?", o.ID),
	)

	return Examinations(queryMods...)
}

// LoadOfferItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assigneeL) LoadOfferItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignee interface{}, mods queries.Applicator) error {
	var slice []*Assignee
	var object *Assignee

	if singular {
		var ok bool
		object, ok = maybeAssignee.(*Assignee)
		if !ok {
			object = new(Assignee)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignee))
			}
		}
	} else {
		s, ok := maybeAssignee.(*[]*Assignee)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignee))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &assigneeR{}
		}
		args[object.OfferItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assigneeR{}
			}

			args[obj.OfferItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`offer_item`),
		qm.WhereIn(`offer_item.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`offer_item.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OfferItem")
	}

	var resultSlice []*OfferItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OfferItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for offer_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offer_item")
	}

	if len(offerItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OfferItem = foreign
		if foreign.R == nil {
			foreign.R = &offerItemR{}
		}
		foreign.R.Assignees = append(foreign.R.Assignees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfferItemID == foreign.ID {
				local.R.OfferItem = foreign
				if foreign.R == nil {
					foreign.R = &offerItemR{}
				}
				foreign.R.Assignees = append(foreign.R.Assignees, local)
				break
			}
		}
	}

	return nil
}

// LoadAssigneeLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assigneeL) LoadAssigneeLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignee interface{}, mods queries.Applicator) error {
	var slice []*Assignee
	var object *Assignee

	if singular {
		var ok bool
		object, ok = maybeAssignee.(*Assignee)
		if !ok {
			object = new(Assignee)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignee))
			}
		}
	} else {
		s, ok := maybeAssignee.(*[]*Assignee)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignee))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &assigneeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assigneeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`assignee_log`),
		qm.WhereIn(`assignee_log.assignee_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assignee_log")
	}

	var resultSlice []*AssigneeLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assignee_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assignee_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assignee_log")
	}

	if len(assigneeLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssigneeLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assigneeLogR{}
			}
			foreign.R.Assignee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AssigneeID {
				local.R.AssigneeLogs = append(local.R.AssigneeLogs, foreign)
				if foreign.R == nil {
					foreign.R = &assigneeLogR{}
				}
				foreign.R.Assignee = local
				break
			}
		}
	}

	return nil
}

// LoadExaminations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assigneeL) LoadExaminations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignee interface{}, mods queries.Applicator) error {
	var slice []*Assignee
	var object *Assignee

	if singular {
		var ok bool
		object, ok = maybeAssignee.(*Assignee)
		if !ok {
			object = new(Assignee)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignee))
			}
		}
	} else {
		s, ok := maybeAssignee.(*[]*Assignee)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignee))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &assigneeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assigneeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`examination`),
		qm.WhereIn(`examination.assignee_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`examination.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examination")
	}

	var resultSlice []*Examination
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examination")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examination")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examination")
	}

	if len(examinationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Examinations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationR{}
			}
			foreign.R.Assignee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AssigneeID {
				local.R.Examinations = append(local.R.Examinations, foreign)
				if foreign.R == nil {
					foreign.R = &examinationR{}
				}
				foreign.R.Assignee = local
				break
			}
		}
	}

	return nil
}

// SetOfferItem of the assignee to the related item.
// Sets o.R.OfferItem to related.
// Adds o to related.R.Assignees.
func (o *Assignee) SetOfferItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OfferItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `assignee` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
		strmangle.WhereClause("`", "`", 0, assigneePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfferItemID = related.ID
	if o.R == nil {
		o.R = &assigneeR{
			OfferItem: related,
		}
	} else {
		o.R.OfferItem = related
	}

	if related.R == nil {
		related.R = &offerItemR{
			Assignees: AssigneeSlice{o},
		}
	} else {
		related.R.Assignees = append(related.R.Assignees, o)
	}

	return nil
}

// AddAssigneeLogs adds the given related objects to the existing relationships
// of the assignee, optionally inserting them as new records.
// Appends related to o.R.AssigneeLogs.
// Sets related.R.Assignee appropriately.
func (o *Assignee) AddAssigneeLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssigneeLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssigneeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `assignee_log` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"assignee_id"}),
				strmangle.WhereClause("`", "`", 0, assigneeLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssigneeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &assigneeR{
			AssigneeLogs: related,
		}
	} else {
		o.R.AssigneeLogs = append(o.R.AssigneeLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assigneeLogR{
				Assignee: o,
			}
		} else {
			rel.R.Assignee = o
		}
	}
	return nil
}

// AddExaminations adds the given related objects to the existing relationships
// of the assignee, optionally inserting them as new records.
// Appends related to o.R.Examinations.
// Sets related.R.Assignee appropriately.
func (o *Assignee) AddExaminations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Examination) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssigneeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `examination` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"assignee_id"}),
				strmangle.WhereClause("`", "`", 0, examinationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssigneeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &assigneeR{
			Examinations: related,
		}
	} else {
		o.R.Examinations = append(o.R.Examinations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationR{
				Assignee: o,
			}
		} else {
			rel.R.Assignee = o
		}
	}
	return nil
}

// Assignees retrieves all the records using an executor.
func Assignees(mods ...qm.QueryMod) assigneeQuery {
	mods = append(mods, qm.From("`assignee`"), qmhelper.WhereIsNull("`assignee`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`assignee`.*"})
	}

	return assigneeQuery{q}
}

// FindAssignee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignee(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Assignee, error) {
	assigneeObj := &Assignee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `assignee` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assigneeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from assignee")
	}

	if err = assigneeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assigneeObj, err
	}

	return assigneeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Assignee) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no assignee provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assigneeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assigneeInsertCacheMut.RLock()
	cache, cached := assigneeInsertCache[key]
	assigneeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assigneeAllColumns,
			assigneeColumnsWithDefault,
			assigneeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assigneeType, assigneeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assigneeType, assigneeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `assignee` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `assignee` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `assignee` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, assigneePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into assignee")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for assignee")
	}

CacheNoHooks:
	if !cached {
		assigneeInsertCacheMut.Lock()
		assigneeInsertCache[key] = cache
		assigneeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Assignee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Assignee) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assigneeUpdateCacheMut.RLock()
	cache, cached := assigneeUpdateCache[key]
	assigneeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assigneeAllColumns,
			assigneePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update assignee, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `assignee` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, assigneePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assigneeType, assigneeMapping, append(wl, assigneePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update assignee row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for assignee")
	}

	if !cached {
		assigneeUpdateCacheMut.Lock()
		assigneeUpdateCache[key] = cache
		assigneeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assigneeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for assignee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for assignee")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssigneeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assigneePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `assignee` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assigneePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in assignee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all assignee")
	}
	return rowsAff, nil
}

var mySQLAssigneeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Assignee) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no assignee provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assigneeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAssigneeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assigneeUpsertCacheMut.RLock()
	cache, cached := assigneeUpsertCache[key]
	assigneeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			assigneeAllColumns,
			assigneeColumnsWithDefault,
			assigneeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assigneeAllColumns,
			assigneePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entity: unable to upsert assignee, could not build update column list")
		}

		ret := strmangle.SetComplement(assigneeAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`assignee`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `assignee` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(assigneeType, assigneeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assigneeType, assigneeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for assignee")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(assigneeType, assigneeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for assignee")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for assignee")
	}

CacheNoHooks:
	if !cached {
		assigneeUpsertCacheMut.Lock()
		assigneeUpsertCache[key] = cache
		assigneeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Assignee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Assignee) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Assignee provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assigneePrimaryKeyMapping)
		sql = "DELETE FROM `assignee` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `assignee` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(assigneeType, assigneeMapping, append(wl, assigneePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from assignee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for assignee")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assigneeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no assigneeQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from assignee")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for assignee")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssigneeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assigneeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assigneePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `assignee` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assigneePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assigneePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `assignee` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assigneePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from assignee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for assignee")
	}

	if len(assigneeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Assignee) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssignee(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssigneeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssigneeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assigneePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `assignee`.* FROM `assignee` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, assigneePrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in AssigneeSlice")
	}

	*o = slice

	return nil
}

// AssigneeExists checks if the Assignee row exists.
func AssigneeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `assignee` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if assignee exists")
	}

	return exists, nil
}

// Exists checks if the Assignee row exists.
func (o *Assignee) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssigneeExists(ctx, exec, o.ID)
}
