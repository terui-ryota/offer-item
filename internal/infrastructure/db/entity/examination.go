// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Examination is an object representing the database table.
type Examination struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OfferItemID      string      `boil:"offer_item_id" json:"offer_item_id" toml:"offer_item_id" yaml:"offer_item_id"`
	AssigneeID       string      `boil:"assignee_id" json:"assignee_id" toml:"assignee_id" yaml:"assignee_id"`
	EntryID          null.String `boil:"entry_id" json:"entry_id,omitempty" toml:"entry_id" yaml:"entry_id,omitempty"`
	SNSUserID        null.String `boil:"sns_user_id" json:"sns_user_id,omitempty" toml:"sns_user_id" yaml:"sns_user_id,omitempty"`
	SNSScreenshotURL null.Bytes  `boil:"sns_screenshot_url" json:"sns_screenshot_url,omitempty" toml:"sns_screenshot_url" yaml:"sns_screenshot_url,omitempty"`
	Reason           null.String `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	ExaminerName     null.String `boil:"examiner_name" json:"examiner_name,omitempty" toml:"examiner_name" yaml:"examiner_name,omitempty"`
	EntryType        uint        `boil:"entry_type" json:"entry_type" toml:"entry_type" yaml:"entry_type"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt        null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *examinationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L examinationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExaminationColumns = struct {
	ID               string
	OfferItemID      string
	AssigneeID       string
	EntryID          string
	SNSUserID        string
	SNSScreenshotURL string
	Reason           string
	ExaminerName     string
	EntryType        string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	OfferItemID:      "offer_item_id",
	AssigneeID:       "assignee_id",
	EntryID:          "entry_id",
	SNSUserID:        "sns_user_id",
	SNSScreenshotURL: "sns_screenshot_url",
	Reason:           "reason",
	ExaminerName:     "examiner_name",
	EntryType:        "entry_type",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var ExaminationTableColumns = struct {
	ID               string
	OfferItemID      string
	AssigneeID       string
	EntryID          string
	SNSUserID        string
	SNSScreenshotURL string
	Reason           string
	ExaminerName     string
	EntryType        string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "examination.id",
	OfferItemID:      "examination.offer_item_id",
	AssigneeID:       "examination.assignee_id",
	EntryID:          "examination.entry_id",
	SNSUserID:        "examination.sns_user_id",
	SNSScreenshotURL: "examination.sns_screenshot_url",
	Reason:           "examination.reason",
	ExaminerName:     "examination.examiner_name",
	EntryType:        "examination.entry_type",
	CreatedAt:        "examination.created_at",
	UpdatedAt:        "examination.updated_at",
	DeletedAt:        "examination.deleted_at",
}

// Generated where

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ExaminationWhere = struct {
	ID               whereHelperstring
	OfferItemID      whereHelperstring
	AssigneeID       whereHelperstring
	EntryID          whereHelpernull_String
	SNSUserID        whereHelpernull_String
	SNSScreenshotURL whereHelpernull_Bytes
	Reason           whereHelpernull_String
	ExaminerName     whereHelpernull_String
	EntryType        whereHelperuint
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "`examination`.`id`"},
	OfferItemID:      whereHelperstring{field: "`examination`.`offer_item_id`"},
	AssigneeID:       whereHelperstring{field: "`examination`.`assignee_id`"},
	EntryID:          whereHelpernull_String{field: "`examination`.`entry_id`"},
	SNSUserID:        whereHelpernull_String{field: "`examination`.`sns_user_id`"},
	SNSScreenshotURL: whereHelpernull_Bytes{field: "`examination`.`sns_screenshot_url`"},
	Reason:           whereHelpernull_String{field: "`examination`.`reason`"},
	ExaminerName:     whereHelpernull_String{field: "`examination`.`examiner_name`"},
	EntryType:        whereHelperuint{field: "`examination`.`entry_type`"},
	CreatedAt:        whereHelpertime_Time{field: "`examination`.`created_at`"},
	UpdatedAt:        whereHelpertime_Time{field: "`examination`.`updated_at`"},
	DeletedAt:        whereHelpernull_Time{field: "`examination`.`deleted_at`"},
}

// ExaminationRels is where relationship names are stored.
var ExaminationRels = struct {
	OfferItem string
	Assignee  string
}{
	OfferItem: "OfferItem",
	Assignee:  "Assignee",
}

// examinationR is where relationships are stored.
type examinationR struct {
	OfferItem *OfferItem `boil:"OfferItem" json:"OfferItem" toml:"OfferItem" yaml:"OfferItem"`
	Assignee  *Assignee  `boil:"Assignee" json:"Assignee" toml:"Assignee" yaml:"Assignee"`
}

// NewStruct creates a new relationship struct
func (*examinationR) NewStruct() *examinationR {
	return &examinationR{}
}

func (r *examinationR) GetOfferItem() *OfferItem {
	if r == nil {
		return nil
	}
	return r.OfferItem
}

func (r *examinationR) GetAssignee() *Assignee {
	if r == nil {
		return nil
	}
	return r.Assignee
}

// examinationL is where Load methods for each relationship are stored.
type examinationL struct{}

var (
	examinationAllColumns            = []string{"id", "offer_item_id", "assignee_id", "entry_id", "sns_user_id", "sns_screenshot_url", "reason", "examiner_name", "entry_type", "created_at", "updated_at", "deleted_at"}
	examinationColumnsWithoutDefault = []string{"id", "offer_item_id", "assignee_id", "entry_id", "sns_user_id", "sns_screenshot_url", "reason", "examiner_name", "entry_type", "created_at", "updated_at", "deleted_at"}
	examinationColumnsWithDefault    = []string{}
	examinationPrimaryKeyColumns     = []string{"id"}
	examinationGeneratedColumns      = []string{}
)

type (
	// ExaminationSlice is an alias for a slice of pointers to Examination.
	// This should almost always be used instead of []Examination.
	ExaminationSlice []*Examination
	// ExaminationHook is the signature for custom Examination hook methods
	ExaminationHook func(context.Context, boil.ContextExecutor, *Examination) error

	examinationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	examinationType                 = reflect.TypeOf(&Examination{})
	examinationMapping              = queries.MakeStructMapping(examinationType)
	examinationPrimaryKeyMapping, _ = queries.BindMapping(examinationType, examinationMapping, examinationPrimaryKeyColumns)
	examinationInsertCacheMut       sync.RWMutex
	examinationInsertCache          = make(map[string]insertCache)
	examinationUpdateCacheMut       sync.RWMutex
	examinationUpdateCache          = make(map[string]updateCache)
	examinationUpsertCacheMut       sync.RWMutex
	examinationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var examinationAfterSelectMu sync.Mutex
var examinationAfterSelectHooks []ExaminationHook

var examinationBeforeInsertMu sync.Mutex
var examinationBeforeInsertHooks []ExaminationHook
var examinationAfterInsertMu sync.Mutex
var examinationAfterInsertHooks []ExaminationHook

var examinationBeforeUpdateMu sync.Mutex
var examinationBeforeUpdateHooks []ExaminationHook
var examinationAfterUpdateMu sync.Mutex
var examinationAfterUpdateHooks []ExaminationHook

var examinationBeforeDeleteMu sync.Mutex
var examinationBeforeDeleteHooks []ExaminationHook
var examinationAfterDeleteMu sync.Mutex
var examinationAfterDeleteHooks []ExaminationHook

var examinationBeforeUpsertMu sync.Mutex
var examinationBeforeUpsertHooks []ExaminationHook
var examinationAfterUpsertMu sync.Mutex
var examinationAfterUpsertHooks []ExaminationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Examination) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Examination) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Examination) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Examination) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Examination) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Examination) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Examination) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Examination) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Examination) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExaminationHook registers your hook function for all future operations.
func AddExaminationHook(hookPoint boil.HookPoint, examinationHook ExaminationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		examinationAfterSelectMu.Lock()
		examinationAfterSelectHooks = append(examinationAfterSelectHooks, examinationHook)
		examinationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		examinationBeforeInsertMu.Lock()
		examinationBeforeInsertHooks = append(examinationBeforeInsertHooks, examinationHook)
		examinationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		examinationAfterInsertMu.Lock()
		examinationAfterInsertHooks = append(examinationAfterInsertHooks, examinationHook)
		examinationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		examinationBeforeUpdateMu.Lock()
		examinationBeforeUpdateHooks = append(examinationBeforeUpdateHooks, examinationHook)
		examinationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		examinationAfterUpdateMu.Lock()
		examinationAfterUpdateHooks = append(examinationAfterUpdateHooks, examinationHook)
		examinationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		examinationBeforeDeleteMu.Lock()
		examinationBeforeDeleteHooks = append(examinationBeforeDeleteHooks, examinationHook)
		examinationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		examinationAfterDeleteMu.Lock()
		examinationAfterDeleteHooks = append(examinationAfterDeleteHooks, examinationHook)
		examinationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		examinationBeforeUpsertMu.Lock()
		examinationBeforeUpsertHooks = append(examinationBeforeUpsertHooks, examinationHook)
		examinationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		examinationAfterUpsertMu.Lock()
		examinationAfterUpsertHooks = append(examinationAfterUpsertHooks, examinationHook)
		examinationAfterUpsertMu.Unlock()
	}
}

// One returns a single examination record from the query.
func (q examinationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Examination, error) {
	o := &Examination{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for examination")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Examination records from the query.
func (q examinationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExaminationSlice, error) {
	var o []*Examination

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Examination slice")
	}

	if len(examinationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Examination records in the query.
func (q examinationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count examination rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q examinationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if examination exists")
	}

	return count > 0, nil
}

// OfferItem pointed to by the foreign key.
func (o *Examination) OfferItem(mods ...qm.QueryMod) offerItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OfferItemID),
	}

	queryMods = append(queryMods, mods...)

	return OfferItems(queryMods...)
}

// Assignee pointed to by the foreign key.
func (o *Examination) Assignee(mods ...qm.QueryMod) assigneeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.AssigneeID),
	}

	queryMods = append(queryMods, mods...)

	return Assignees(queryMods...)
}

// LoadOfferItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationL) LoadOfferItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExamination interface{}, mods queries.Applicator) error {
	var slice []*Examination
	var object *Examination

	if singular {
		var ok bool
		object, ok = maybeExamination.(*Examination)
		if !ok {
			object = new(Examination)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExamination)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExamination))
			}
		}
	} else {
		s, ok := maybeExamination.(*[]*Examination)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExamination)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExamination))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &examinationR{}
		}
		args[object.OfferItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationR{}
			}

			args[obj.OfferItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`offer_item`),
		qm.WhereIn(`offer_item.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`offer_item.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OfferItem")
	}

	var resultSlice []*OfferItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OfferItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for offer_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for offer_item")
	}

	if len(offerItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OfferItem = foreign
		if foreign.R == nil {
			foreign.R = &offerItemR{}
		}
		foreign.R.Examinations = append(foreign.R.Examinations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfferItemID == foreign.ID {
				local.R.OfferItem = foreign
				if foreign.R == nil {
					foreign.R = &offerItemR{}
				}
				foreign.R.Examinations = append(foreign.R.Examinations, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationL) LoadAssignee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExamination interface{}, mods queries.Applicator) error {
	var slice []*Examination
	var object *Examination

	if singular {
		var ok bool
		object, ok = maybeExamination.(*Examination)
		if !ok {
			object = new(Examination)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExamination)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExamination))
			}
		}
	} else {
		s, ok := maybeExamination.(*[]*Examination)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExamination)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExamination))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &examinationR{}
		}
		args[object.AssigneeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationR{}
			}

			args[obj.AssigneeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`assignee`),
		qm.WhereIn(`assignee.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`assignee.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Assignee")
	}

	var resultSlice []*Assignee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Assignee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assignee")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assignee")
	}

	if len(assigneeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Assignee = foreign
		if foreign.R == nil {
			foreign.R = &assigneeR{}
		}
		foreign.R.Examinations = append(foreign.R.Examinations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssigneeID == foreign.ID {
				local.R.Assignee = foreign
				if foreign.R == nil {
					foreign.R = &assigneeR{}
				}
				foreign.R.Examinations = append(foreign.R.Examinations, local)
				break
			}
		}
	}

	return nil
}

// SetOfferItem of the examination to the related item.
// Sets o.R.OfferItem to related.
// Adds o to related.R.Examinations.
func (o *Examination) SetOfferItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OfferItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `examination` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"offer_item_id"}),
		strmangle.WhereClause("`", "`", 0, examinationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfferItemID = related.ID
	if o.R == nil {
		o.R = &examinationR{
			OfferItem: related,
		}
	} else {
		o.R.OfferItem = related
	}

	if related.R == nil {
		related.R = &offerItemR{
			Examinations: ExaminationSlice{o},
		}
	} else {
		related.R.Examinations = append(related.R.Examinations, o)
	}

	return nil
}

// SetAssignee of the examination to the related item.
// Sets o.R.Assignee to related.
// Adds o to related.R.Examinations.
func (o *Examination) SetAssignee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Assignee) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `examination` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"assignee_id"}),
		strmangle.WhereClause("`", "`", 0, examinationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssigneeID = related.ID
	if o.R == nil {
		o.R = &examinationR{
			Assignee: related,
		}
	} else {
		o.R.Assignee = related
	}

	if related.R == nil {
		related.R = &assigneeR{
			Examinations: ExaminationSlice{o},
		}
	} else {
		related.R.Examinations = append(related.R.Examinations, o)
	}

	return nil
}

// Examinations retrieves all the records using an executor.
func Examinations(mods ...qm.QueryMod) examinationQuery {
	mods = append(mods, qm.From("`examination`"), qmhelper.WhereIsNull("`examination`.`deleted_at`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`examination`.*"})
	}

	return examinationQuery{q}
}

// FindExamination retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExamination(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Examination, error) {
	examinationObj := &Examination{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `examination` where `id`=? and `deleted_at` is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, examinationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from examination")
	}

	if err = examinationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return examinationObj, err
	}

	return examinationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Examination) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no examination provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examinationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	examinationInsertCacheMut.RLock()
	cache, cached := examinationInsertCache[key]
	examinationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			examinationAllColumns,
			examinationColumnsWithDefault,
			examinationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(examinationType, examinationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(examinationType, examinationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `examination` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `examination` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `examination` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, examinationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into examination")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for examination")
	}

CacheNoHooks:
	if !cached {
		examinationInsertCacheMut.Lock()
		examinationInsertCache[key] = cache
		examinationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Examination.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Examination) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	examinationUpdateCacheMut.RLock()
	cache, cached := examinationUpdateCache[key]
	examinationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			examinationAllColumns,
			examinationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update examination, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `examination` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, examinationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(examinationType, examinationMapping, append(wl, examinationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update examination row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for examination")
	}

	if !cached {
		examinationUpdateCacheMut.Lock()
		examinationUpdateCache[key] = cache
		examinationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q examinationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for examination")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for examination")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExaminationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `examination` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examinationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in examination slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all examination")
	}
	return rowsAff, nil
}

var mySQLExaminationUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Examination) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no examination provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examinationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLExaminationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	examinationUpsertCacheMut.RLock()
	cache, cached := examinationUpsertCache[key]
	examinationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			examinationAllColumns,
			examinationColumnsWithDefault,
			examinationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			examinationAllColumns,
			examinationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entity: unable to upsert examination, could not build update column list")
		}

		ret := strmangle.SetComplement(examinationAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`examination`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `examination` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(examinationType, examinationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(examinationType, examinationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for examination")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(examinationType, examinationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for examination")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for examination")
	}

CacheNoHooks:
	if !cached {
		examinationUpsertCacheMut.Lock()
		examinationUpsertCache[key] = cache
		examinationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Examination record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Examination) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Examination provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), examinationPrimaryKeyMapping)
		sql = "DELETE FROM `examination` WHERE `id`=?"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `examination` SET %s WHERE `id`=?",
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		valueMapping, err := queries.BindMapping(examinationType, examinationMapping, append(wl, examinationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from examination")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for examination")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q examinationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no examinationQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from examination")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for examination")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExaminationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(examinationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM `examination` WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examinationPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE `examination` SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examinationPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("`", "`", 0, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from examination slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for examination")
	}

	if len(examinationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Examination) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExamination(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExaminationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExaminationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `examination`.* FROM `examination` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, examinationPrimaryKeyColumns, len(*o)) +
		"and `deleted_at` is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in ExaminationSlice")
	}

	*o = slice

	return nil
}

// ExaminationExists checks if the Examination row exists.
func ExaminationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `examination` where `id`=? and `deleted_at` is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if examination exists")
	}

	return exists, nil
}

// Exists checks if the Examination row exists.
func (o *Examination) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExaminationExists(ctx, exec, o.ID)
}
