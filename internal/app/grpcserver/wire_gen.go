// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package grpcserver

import (
	"github.com/terui-ryota/offer-item/internal/app/grpcserver/app"
	"github.com/terui-ryota/offer-item/internal/app/grpcserver/config"
	"github.com/terui-ryota/offer-item/internal/app/grpcserver/presentation/handler"
	"github.com/terui-ryota/offer-item/internal/application/service"
	"github.com/terui-ryota/offer-item/internal/application/usecase"
	"github.com/terui-ryota/offer-item/internal/common"
	config2 "github.com/terui-ryota/offer-item/internal/common/config"
	"github.com/terui-ryota/offer-item/internal/infrastructure/adapter_impl"
	"github.com/terui-ryota/offer-item/internal/infrastructure/component/rakuten"
	"github.com/terui-ryota/offer-item/internal/infrastructure/repository_impl"
)

// Injectors from wire.go:

func InitializeApp() (common.App, error) {
	grpcConfig := config.LoadConfig()
	database := grpcConfig.Database
	db := config2.LoadDB(database)
	offerItemRepository := repository_impl.NewOfferItemRepositoryImpl()
	assigneeRepository := repository_impl.NewAssigneeRepositoryImpl()
	questionnaireRepository := repository_impl.NewQuestionnaireRepositoryImpl()
	questionnaireQuestionAnswerRepository := repository_impl.NewQuestionnaireQuestionAnswerRepositoryImpl(db)
	rakutenConfig := grpcConfig.Rakuten
	client, err := config.LoadHttpClient(grpcConfig)
	if err != nil {
		return nil, err
	}
	applicationIDHelper := rakuten.NewApplicationIDHelper(rakutenConfig)
	rakutenIchibaClient := rakuten.NewRakutenIchibaClient(rakutenConfig, client, applicationIDHelper)
	affiliateItemAdapter := adapter_impl.NewAffiliateItemAdapterImpl(rakutenIchibaClient)
	examinationRepository := repository_impl.NewExaminationRepositoryImpl()
	validationConfig := grpcConfig.Validation
	offerItemService := service.NewOfferItemServiceImpl(affiliateItemAdapter)
	offerItemUsecase := usecase.NewOfferItemUsecase(db, offerItemRepository, assigneeRepository, questionnaireRepository, questionnaireQuestionAnswerRepository, affiliateItemAdapter, examinationRepository, validationConfig, offerItemService)
	assigneeUsecase := usecase.NewAssigneeUsecase(db, grpcConfig, assigneeRepository, offerItemRepository, questionnaireRepository, questionnaireQuestionAnswerRepository)
	offerItemHandlerServer := handler.NewOfferItemHandler(offerItemUsecase, assigneeUsecase)
	commonApp := app.NewApp(offerItemHandlerServer, grpcConfig)
	return commonApp, nil
}
