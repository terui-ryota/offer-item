// Code generated by MockGen. DO NOT EDIT.
// Source: questionnaire_question_answer_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/terui-ryota/offer-item/internal/domain/model"
)

// MockQuestionnaireQuestionAnswerRepository is a mock of QuestionnaireQuestionAnswerRepository interface.
type MockQuestionnaireQuestionAnswerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionnaireQuestionAnswerRepositoryMockRecorder
}

// MockQuestionnaireQuestionAnswerRepositoryMockRecorder is the mock recorder for MockQuestionnaireQuestionAnswerRepository.
type MockQuestionnaireQuestionAnswerRepositoryMockRecorder struct {
	mock *MockQuestionnaireQuestionAnswerRepository
}

// NewMockQuestionnaireQuestionAnswerRepository creates a new mock instance.
func NewMockQuestionnaireQuestionAnswerRepository(ctrl *gomock.Controller) *MockQuestionnaireQuestionAnswerRepository {
	mock := &MockQuestionnaireQuestionAnswerRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionnaireQuestionAnswerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionnaireQuestionAnswerRepository) EXPECT() *MockQuestionnaireQuestionAnswerRepositoryMockRecorder {
	return m.recorder
}

// BulkGetByOfferItemIDAndAssigneeIDs mocks base method.
func (m *MockQuestionnaireQuestionAnswerRepository) BulkGetByOfferItemIDAndAssigneeIDs(ctx context.Context, offerItemID model.OfferItemID, assigneeIDs []model.AssigneeID) (map[model.AssigneeID]map[model.QuestionID]model.QuestionAnswer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkGetByOfferItemIDAndAssigneeIDs", ctx, offerItemID, assigneeIDs)
	ret0, _ := ret[0].(map[model.AssigneeID]map[model.QuestionID]model.QuestionAnswer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkGetByOfferItemIDAndAssigneeIDs indicates an expected call of BulkGetByOfferItemIDAndAssigneeIDs.
func (mr *MockQuestionnaireQuestionAnswerRepositoryMockRecorder) BulkGetByOfferItemIDAndAssigneeIDs(ctx, offerItemID, assigneeIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkGetByOfferItemIDAndAssigneeIDs", reflect.TypeOf((*MockQuestionnaireQuestionAnswerRepository)(nil).BulkGetByOfferItemIDAndAssigneeIDs), ctx, offerItemID, assigneeIDs)
}

// DeleteByOfferItemID mocks base method.
func (m *MockQuestionnaireQuestionAnswerRepository) DeleteByOfferItemID(ctx context.Context, tx *sql.Tx, offerItemID model.OfferItemID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByOfferItemID", ctx, tx, offerItemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByOfferItemID indicates an expected call of DeleteByOfferItemID.
func (mr *MockQuestionnaireQuestionAnswerRepositoryMockRecorder) DeleteByOfferItemID(ctx, tx, offerItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByOfferItemID", reflect.TypeOf((*MockQuestionnaireQuestionAnswerRepository)(nil).DeleteByOfferItemID), ctx, tx, offerItemID)
}

// Save mocks base method.
func (m *MockQuestionnaireQuestionAnswerRepository) Save(ctx context.Context, tx *sql.Tx, offerItemID model.OfferItemID, assigneeID model.AssigneeID, answers []model.QuestionAnswer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, tx, offerItemID, assigneeID, answers)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockQuestionnaireQuestionAnswerRepositoryMockRecorder) Save(ctx, tx, offerItemID, assigneeID, answers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockQuestionnaireQuestionAnswerRepository)(nil).Save), ctx, tx, offerItemID, assigneeID, answers)
}
