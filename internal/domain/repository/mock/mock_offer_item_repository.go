// Code generated by MockGen. DO NOT EDIT.
// Source: offer_item_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/terui-ryota/offer-item/internal/domain/dto"
	model "github.com/terui-ryota/offer-item/internal/domain/model"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockOfferItemRepository is a mock of OfferItemRepository interface.
type MockOfferItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOfferItemRepositoryMockRecorder
}

// MockOfferItemRepositoryMockRecorder is the mock recorder for MockOfferItemRepository.
type MockOfferItemRepositoryMockRecorder struct {
	mock *MockOfferItemRepository
}

// NewMockOfferItemRepository creates a new mock instance.
func NewMockOfferItemRepository(ctrl *gomock.Controller) *MockOfferItemRepository {
	mock := &MockOfferItemRepository{ctrl: ctrl}
	mock.recorder = &MockOfferItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferItemRepository) EXPECT() *MockOfferItemRepositoryMockRecorder {
	return m.recorder
}

// BulkGet mocks base method.
func (m *MockOfferItemRepository) BulkGet(ctx context.Context, exec boil.ContextExecutor, ids []model.OfferItemID, isClosed bool) (map[model.OfferItemID]*model.OfferItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkGet", ctx, exec, ids, isClosed)
	ret0, _ := ret[0].(map[model.OfferItemID]*model.OfferItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkGet indicates an expected call of BulkGet.
func (mr *MockOfferItemRepositoryMockRecorder) BulkGet(ctx, exec, ids, isClosed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkGet", reflect.TypeOf((*MockOfferItemRepository)(nil).BulkGet), ctx, exec, ids, isClosed)
}

// Create mocks base method.
func (m *MockOfferItemRepository) Create(ctx context.Context, tx *sql.Tx, offerItem *model.OfferItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, offerItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOfferItemRepositoryMockRecorder) Create(ctx, tx, offerItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOfferItemRepository)(nil).Create), ctx, tx, offerItem)
}

// Delete mocks base method.
func (m *MockOfferItemRepository) Delete(ctx context.Context, tx *sql.Tx, id model.OfferItemID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOfferItemRepositoryMockRecorder) Delete(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOfferItemRepository)(nil).Delete), ctx, tx, id)
}

// Get mocks base method.
func (m *MockOfferItemRepository) Get(ctx context.Context, exec boil.ContextExecutor, offerItemID model.OfferItemID, withLock bool) (*model.OfferItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, exec, offerItemID, withLock)
	ret0, _ := ret[0].(*model.OfferItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOfferItemRepositoryMockRecorder) Get(ctx, exec, offerItemID, withLock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOfferItemRepository)(nil).Get), ctx, exec, offerItemID, withLock)
}

// List mocks base method.
func (m *MockOfferItemRepository) List(ctx context.Context, exec boil.ContextExecutor, condition *model.ListCondition, isClosed bool) (*model.ListOfferItemResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, exec, condition, isClosed)
	ret0, _ := ret[0].(*model.ListOfferItemResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOfferItemRepositoryMockRecorder) List(ctx, exec, condition, isClosed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOfferItemRepository)(nil).List), ctx, exec, condition, isClosed)
}

// ListIDsByEndDate mocks base method.
func (m *MockOfferItemRepository) ListIDsByEndDate(ctx context.Context, exec boil.ContextExecutor, sinceEndDate, untilEndDate time.Time) (model.OfferItemIDList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIDsByEndDate", ctx, exec, sinceEndDate, untilEndDate)
	ret0, _ := ret[0].(model.OfferItemIDList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIDsByEndDate indicates an expected call of ListIDsByEndDate.
func (mr *MockOfferItemRepositoryMockRecorder) ListIDsByEndDate(ctx, exec, sinceEndDate, untilEndDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIDsByEndDate", reflect.TypeOf((*MockOfferItemRepository)(nil).ListIDsByEndDate), ctx, exec, sinceEndDate, untilEndDate)
}

// Search mocks base method.
func (m *MockOfferItemRepository) Search(ctx context.Context, exec boil.ContextExecutor, searchCriteria *dto.SearchOfferItemCriteria, condition *model.ListCondition, isClosed bool) (*model.ListOfferItemResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, exec, searchCriteria, condition, isClosed)
	ret0, _ := ret[0].(*model.ListOfferItemResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockOfferItemRepositoryMockRecorder) Search(ctx, exec, searchCriteria, condition, isClosed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockOfferItemRepository)(nil).Search), ctx, exec, searchCriteria, condition, isClosed)
}

// Update mocks base method.
func (m *MockOfferItemRepository) Update(ctx context.Context, tx *sql.Tx, offerItem *model.OfferItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, offerItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOfferItemRepositoryMockRecorder) Update(ctx, tx, offerItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOfferItemRepository)(nil).Update), ctx, tx, offerItem)
}
