// Code generated by MockGen. DO NOT EDIT.
// Source: examination_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/terui-ryota/offer-item/internal/domain/model"
)

// MockExaminationRepository is a mock of ExaminationRepository interface.
type MockExaminationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExaminationRepositoryMockRecorder
}

// MockExaminationRepositoryMockRecorder is the mock recorder for MockExaminationRepository.
type MockExaminationRepositoryMockRecorder struct {
	mock *MockExaminationRepository
}

// NewMockExaminationRepository creates a new mock instance.
func NewMockExaminationRepository(ctrl *gomock.Controller) *MockExaminationRepository {
	mock := &MockExaminationRepository{ctrl: ctrl}
	mock.recorder = &MockExaminationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExaminationRepository) EXPECT() *MockExaminationRepositoryMockRecorder {
	return m.recorder
}

// BulkGetByOfferItemID mocks base method.
func (m *MockExaminationRepository) BulkGetByOfferItemID(ctx context.Context, db *sql.DB, offerItemID model.OfferItemID, entryType model.EntryType) (map[model.AmebaID]*model.Examination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkGetByOfferItemID", ctx, db, offerItemID, entryType)
	ret0, _ := ret[0].(map[model.AmebaID]*model.Examination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkGetByOfferItemID indicates an expected call of BulkGetByOfferItemID.
func (mr *MockExaminationRepositoryMockRecorder) BulkGetByOfferItemID(ctx, db, offerItemID, entryType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkGetByOfferItemID", reflect.TypeOf((*MockExaminationRepository)(nil).BulkGetByOfferItemID), ctx, db, offerItemID, entryType)
}

// Create mocks base method.
func (m *MockExaminationRepository) Create(ctx context.Context, db *sql.DB, examination *model.Examination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, db, examination)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExaminationRepositoryMockRecorder) Create(ctx, db, examination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExaminationRepository)(nil).Create), ctx, db, examination)
}

// Get mocks base method.
func (m *MockExaminationRepository) Get(ctx context.Context, db *sql.DB, offerItemID model.OfferItemID, assigneeID model.AssigneeID, entryType model.EntryType) (*model.Examination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, db, offerItemID, assigneeID, entryType)
	ret0, _ := ret[0].(*model.Examination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExaminationRepositoryMockRecorder) Get(ctx, db, offerItemID, assigneeID, entryType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExaminationRepository)(nil).Get), ctx, db, offerItemID, assigneeID, entryType)
}

// Update mocks base method.
func (m *MockExaminationRepository) Update(ctx context.Context, exec *sql.DB, examination *model.Examination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, exec, examination)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockExaminationRepositoryMockRecorder) Update(ctx, exec, examination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExaminationRepository)(nil).Update), ctx, exec, examination)
}
