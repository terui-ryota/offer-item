// Code generated by MockGen. DO NOT EDIT.
// Source: assignee_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/terui-ryota/offer-item/internal/domain/model"
	boil "github.com/volatiletech/sqlboiler/v4/boil"
)

// MockAssigneeRepository is a mock of AssigneeRepository interface.
type MockAssigneeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAssigneeRepositoryMockRecorder
}

// MockAssigneeRepositoryMockRecorder is the mock recorder for MockAssigneeRepository.
type MockAssigneeRepositoryMockRecorder struct {
	mock *MockAssigneeRepository
}

// NewMockAssigneeRepository creates a new mock instance.
func NewMockAssigneeRepository(ctrl *gomock.Controller) *MockAssigneeRepository {
	mock := &MockAssigneeRepository{ctrl: ctrl}
	mock.recorder = &MockAssigneeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssigneeRepository) EXPECT() *MockAssigneeRepositoryMockRecorder {
	return m.recorder
}

// BulkGetByOfferItemIDAmebaIDs mocks base method.
func (m *MockAssigneeRepository) BulkGetByOfferItemIDAmebaIDs(ctx context.Context, db *sql.DB, offerItemID model.OfferItemID, amebaIDs []model.AmebaID, withLock bool) (map[model.AmebaID]*model.Assignee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkGetByOfferItemIDAmebaIDs", ctx, db, offerItemID, amebaIDs, withLock)
	ret0, _ := ret[0].(map[model.AmebaID]*model.Assignee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkGetByOfferItemIDAmebaIDs indicates an expected call of BulkGetByOfferItemIDAmebaIDs.
func (mr *MockAssigneeRepositoryMockRecorder) BulkGetByOfferItemIDAmebaIDs(ctx, db, offerItemID, amebaIDs, withLock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkGetByOfferItemIDAmebaIDs", reflect.TypeOf((*MockAssigneeRepository)(nil).BulkGetByOfferItemIDAmebaIDs), ctx, db, offerItemID, amebaIDs, withLock)
}

// Create mocks base method.
func (m *MockAssigneeRepository) Create(ctx context.Context, tx *sql.Tx, assignee *model.Assignee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, assignee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAssigneeRepositoryMockRecorder) Create(ctx, tx, assignee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAssigneeRepository)(nil).Create), ctx, tx, assignee)
}

// DeleteByOfferItemIDAndAmebaID mocks base method.
func (m *MockAssigneeRepository) DeleteByOfferItemIDAndAmebaID(ctx context.Context, tx *sql.Tx, offerItemID model.OfferItemID, amebaID model.AmebaID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByOfferItemIDAndAmebaID", ctx, tx, offerItemID, amebaID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByOfferItemIDAndAmebaID indicates an expected call of DeleteByOfferItemIDAndAmebaID.
func (mr *MockAssigneeRepositoryMockRecorder) DeleteByOfferItemIDAndAmebaID(ctx, tx, offerItemID, amebaID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByOfferItemIDAndAmebaID", reflect.TypeOf((*MockAssigneeRepository)(nil).DeleteByOfferItemIDAndAmebaID), ctx, tx, offerItemID, amebaID)
}

// Get mocks base method.
func (m *MockAssigneeRepository) Get(ctx context.Context, exec boil.ContextExecutor, assigneeID model.AssigneeID) (*model.Assignee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, exec, assigneeID)
	ret0, _ := ret[0].(*model.Assignee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAssigneeRepositoryMockRecorder) Get(ctx, exec, assigneeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAssigneeRepository)(nil).Get), ctx, exec, assigneeID)
}

// GetByAmebaIDOfferItemID mocks base method.
func (m *MockAssigneeRepository) GetByAmebaIDOfferItemID(ctx context.Context, exec boil.ContextExecutor, amebaID model.AmebaID, offerItemID model.OfferItemID) (*model.Assignee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAmebaIDOfferItemID", ctx, exec, amebaID, offerItemID)
	ret0, _ := ret[0].(*model.Assignee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAmebaIDOfferItemID indicates an expected call of GetByAmebaIDOfferItemID.
func (mr *MockAssigneeRepositoryMockRecorder) GetByAmebaIDOfferItemID(ctx, exec, amebaID, offerItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAmebaIDOfferItemID", reflect.TypeOf((*MockAssigneeRepository)(nil).GetByAmebaIDOfferItemID), ctx, exec, amebaID, offerItemID)
}

// ListByAmebaID mocks base method.
func (m *MockAssigneeRepository) ListByAmebaID(ctx context.Context, exec boil.ContextExecutor, amebaID model.AmebaID) (model.AssigneeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAmebaID", ctx, exec, amebaID)
	ret0, _ := ret[0].(model.AssigneeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAmebaID indicates an expected call of ListByAmebaID.
func (mr *MockAssigneeRepositoryMockRecorder) ListByAmebaID(ctx, exec, amebaID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAmebaID", reflect.TypeOf((*MockAssigneeRepository)(nil).ListByAmebaID), ctx, exec, amebaID)
}

// ListByOfferItemID mocks base method.
func (m *MockAssigneeRepository) ListByOfferItemID(ctx context.Context, exec boil.ContextExecutor, offerItemID model.OfferItemID) (model.AssigneeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOfferItemID", ctx, exec, offerItemID)
	ret0, _ := ret[0].(model.AssigneeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByOfferItemID indicates an expected call of ListByOfferItemID.
func (mr *MockAssigneeRepositoryMockRecorder) ListByOfferItemID(ctx, exec, offerItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOfferItemID", reflect.TypeOf((*MockAssigneeRepository)(nil).ListByOfferItemID), ctx, exec, offerItemID)
}

// ListByOfferItemIDAmebaIDs mocks base method.
func (m *MockAssigneeRepository) ListByOfferItemIDAmebaIDs(ctx context.Context, tx *sql.Tx, offerItemID model.OfferItemID, amebaIDs []model.AmebaID, withLock bool) (model.AssigneeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOfferItemIDAmebaIDs", ctx, tx, offerItemID, amebaIDs, withLock)
	ret0, _ := ret[0].(model.AssigneeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByOfferItemIDAmebaIDs indicates an expected call of ListByOfferItemIDAmebaIDs.
func (mr *MockAssigneeRepositoryMockRecorder) ListByOfferItemIDAmebaIDs(ctx, tx, offerItemID, amebaIDs, withLock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOfferItemIDAmebaIDs", reflect.TypeOf((*MockAssigneeRepository)(nil).ListByOfferItemIDAmebaIDs), ctx, tx, offerItemID, amebaIDs, withLock)
}

// ListByOfferItemIDStage mocks base method.
func (m *MockAssigneeRepository) ListByOfferItemIDStage(ctx context.Context, exec boil.ContextExecutor, offerItemID model.OfferItemID, stage model.Stage) (model.AssigneeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOfferItemIDStage", ctx, exec, offerItemID, stage)
	ret0, _ := ret[0].(model.AssigneeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByOfferItemIDStage indicates an expected call of ListByOfferItemIDStage.
func (mr *MockAssigneeRepositoryMockRecorder) ListByOfferItemIDStage(ctx, exec, offerItemID, stage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOfferItemIDStage", reflect.TypeOf((*MockAssigneeRepository)(nil).ListByOfferItemIDStage), ctx, exec, offerItemID, stage)
}

// ListCount mocks base method.
func (m *MockAssigneeRepository) ListCount(ctx context.Context, exec boil.ContextExecutor, offerItemID model.OfferItemID) ([]model.AssigneeCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCount", ctx, exec, offerItemID)
	ret0, _ := ret[0].([]model.AssigneeCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCount indicates an expected call of ListCount.
func (mr *MockAssigneeRepositoryMockRecorder) ListCount(ctx, exec, offerItemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCount", reflect.TypeOf((*MockAssigneeRepository)(nil).ListCount), ctx, exec, offerItemID)
}

// ListUnderExamination mocks base method.
func (m *MockAssigneeRepository) ListUnderExamination(ctx context.Context, exec boil.ContextExecutor) (model.AssigneeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnderExamination", ctx, exec)
	ret0, _ := ret[0].(model.AssigneeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnderExamination indicates an expected call of ListUnderExamination.
func (mr *MockAssigneeRepositoryMockRecorder) ListUnderExamination(ctx, exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnderExamination", reflect.TypeOf((*MockAssigneeRepository)(nil).ListUnderExamination), ctx, exec)
}

// ListUnderPaying mocks base method.
func (m *MockAssigneeRepository) ListUnderPaying(ctx context.Context, exec boil.ContextExecutor, offerItemID model.OfferItemID, amebaIDs []model.AmebaID) (model.AssigneeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnderPaying", ctx, exec, offerItemID, amebaIDs)
	ret0, _ := ret[0].(model.AssigneeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnderPaying indicates an expected call of ListUnderPaying.
func (mr *MockAssigneeRepositoryMockRecorder) ListUnderPaying(ctx, exec, offerItemID, amebaIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnderPaying", reflect.TypeOf((*MockAssigneeRepository)(nil).ListUnderPaying), ctx, exec, offerItemID, amebaIDs)
}

// Update mocks base method.
func (m *MockAssigneeRepository) Update(ctx context.Context, exec boil.ContextExecutor, assignee *model.Assignee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, exec, assignee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAssigneeRepositoryMockRecorder) Update(ctx, exec, assignee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAssigneeRepository)(nil).Update), ctx, exec, assignee)
}
